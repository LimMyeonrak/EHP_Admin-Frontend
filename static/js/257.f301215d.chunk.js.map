{"version":3,"file":"static/js/257.f301215d.chunk.js","mappings":"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","sources":["pages/Partner/faq/comp/NoticeForm.tsx","pages/Partner/faq/new/NewFaqContainer.tsx","pages/Partner/faq/new/index.tsx"],"sourcesContent":["/* eslint-disable */\nimport { DownloadOutlined } from '@ant-design/icons';\nimport { Row, Col, Select, Input, Button, Checkbox, Form, Radio } from 'antd';\nimport { CustomUpload, Editor } from 'components';\nimport CustomDownload from 'components/customDownload';\nimport { emptyString } from 'helper/recycle';\nimport { uniqueId } from 'lodash';\nimport moment from 'moment';\nimport ManagerPopup from 'Popups/Manager';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { confirmOptions, targetsOptions, topFixOptions, useOptions } from 'types/Common/NoticesOptions';\n\nconst FaqForm = props => {\n    const {\n        mode,\n        form,\n        content,\n        setContent,\n        uploadFiles,\n        setUploadFiles,\n        boadrFiles,\n        setBoadrFiles,\n        onClickDownLoad,\n        setIsChaged,\n        userInfo\n    } = props;\n    const [visibleTargetSearch, setVisibleTargetSearch] = useState<boolean>(false);\n    const onchange = e => {\n        if (content !== e) {\n            form.setFieldsValue({ content: e });\n            setContent(e);\n            setIsChaged(true);\n        }\n    };\n\n    const onChangeNoticeTarget = e => {\n        setVisibleTargetSearch(e === 3);\n    };\n    const setManager = e => {\n        const id = e.map(item => {\n            return item.id;\n        });\n        form.setFieldsValue({ noticeTargetIds: id.toString() });\n    };\n\n    useEffect(() => {\n        setIsChaged(false);\n        return () => {\n            //\n        };\n    }, []);\n\n    return (\n        <Form\n            layout=\"horizontal\"\n            form={form}\n            onChange={() => {\n                setIsChaged(true);\n            }}>\n            <Row className=\"content__contentbox__table\">\n                <Form.Item\n                    labelCol={{ span: 0 }}\n                    wrapperCol={{ span: 0 }}\n                    name=\"articleIdx\"\n                    hidden\n                    label=\"\"\n                    initialValue={null}>\n                    <Input />\n                </Form.Item>\n                {/* <Col className=\"label required\" span={4}>\n                    대상\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item name=\"noticeTarget\" label=\"\" style={{ width: '200px' }} initialValue={0}>\n                            <Select onChange={onChangeNoticeTarget} options={targetsOptions} />\n                        </Form.Item>\n                        {visibleTargetSearch && (\n                            <>\n                                <Form.Item\n                                    name=\"noticeTargetIds\"\n                                    label=\"\"\n                                    initialValue=\"\"\n                                    style={{ width: '200px', marginLeft: '10px', marginRight: '0px' }}>\n                                    <Input readOnly />\n                                </Form.Item>\n                                <ManagerPopup setValue={setManager} />\n                            </>\n                        )}\n                    </Row>\n                </Col> */}\n                {/* <Col className=\"label\" span={4}>\n                    확인여부\n                </Col>\n                <Col className=\"data\" span={8}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"isConfirm\"\n                        label=\"\"\n                        initialValue={0}>\n                        <Radio.Group options={confirmOptions} />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    상단고정 여부\n                </Col>\n                <Col className=\"data\" span={8}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 10 }}\n                        name=\"isTopFix\"\n                        label=\"\"\n                        valuePropName=\"checked\">\n                        <Checkbox>고정</Checkbox>\n                    </Form.Item>\n                </Col> */}\n                <Col className=\"label\" span={4}>\n                    노출여부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item labelCol={{ span: 0 }} wrapperCol={{ span: 10 }} name=\"isUse\" label=\"\" initialValue={1}>\n                        <Radio.Group options={useOptions} />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label required\" span={4}>\n                    제목\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"title\"\n                        label=\"\"\n                        rules={[{ required: true, message: '제목을 입력해주세요.' }]}>\n                        <Input />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label required\" span={4}>\n                    답변\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Editor value={content} height={350} onChange={onchange} />\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"content\"\n                        label=\"\"\n                        style={{ marginTop: '-32px' }}\n                        rules={[{ required: true, message: '내용을 입력해주세요.' }]}>\n                        <Input hidden style={{ height: '0px' }} />\n                    </Form.Item>\n                </Col>\n                {/* <Col className=\"label\" span={4}>\n                    첨부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <CustomDownload downloadFiles={boadrFiles} setDownloadFiles={setBoadrFiles} />\n                    <CustomUpload\n                        uploadFiles={uploadFiles}\n                        setUploadFiles={setUploadFiles}\n                        maxCount={boadrFiles ? 3 - boadrFiles.length : 3}\n                    />\n                </Col> */}\n                <Col className=\"label\" span={4}>\n                    등록자/일시\n                </Col>\n                <Col className=\"data\" span={8}>\n                    {userInfo\n                        ? `${emptyString(userInfo.name)} ${emptyString(moment().format('YYYY-MM-DD HH:mm:ss'))}`\n                        : `${emptyString(form.getFieldValue('registerName'))} ${emptyString(\n                              form.getFieldValue('registDate')\n                          )}`}\n                </Col>\n                <Col className=\"label\" span={4}>\n                    최종수정자/일시\n                </Col>\n                <Col className=\"data\" span={8}>\n                    {`${emptyString(form.getFieldValue('updaterName'))} ${emptyString(\n                        form.getFieldValue('updateDate')\n                    )}`}\n                </Col>\n            </Row>\n        </Form>\n    );\n};\nexport default FaqForm;\n","import React, { useState, useEffect } from 'react';\nimport modal from 'helper/customModal';\nimport moment from 'moment';\nimport useUser from 'hooks/user';\nimport { Row, Button, Breadcrumb, Form } from 'antd';\nimport { isEmpty, uniqueId } from 'lodash';\nimport { getNotice, postNotices } from 'api/partner/noticesApi';\nimport { useHistory, useParams } from 'react-router-dom';\nimport useLoding from 'hooks/useLoding';\nimport NoticeForm from '../comp/NoticeForm';\n\nconst AddFaqContainer: React.FunctionComponent = () => {\n    const [rowDatas, setRowDatas] = useState<any>([]);\n    const { userInfo } = useUser();\n    const [content, setContent] = useState<any>();\n    const [isChaged, setIsChaged] = useState<boolean>(false);\n    const history = useHistory();\n    const [form] = Form.useForm();\n    const [uploadFiles, setUploadFiles] = useState<File[]>([]);\n    const { setLoading } = useLoding();\n\n    useEffect(() => {\n        return () => {\n            form.resetFields();\n            setContent('');\n            setIsChaged(false);\n            setUploadFiles([]);\n        };\n    }, []);\n\n    const onFinish = (values: any) => {\n        form.validateFields().then(values => {\n            const params = { ...values, isTopFix: values.isTopFix ? 1 : 0 };\n            const formData = new FormData();\n\n            Object.keys(params).forEach(key => {\n                if (params[key] !== undefined && params[key] !== null) {\n                    formData.append(key, params[key]);\n                } else if (key === 'articleIdx') {\n                    formData.append('articleIdx', '');\n                }\n            });\n            if (uploadFiles) {\n                uploadFiles.forEach(element => {\n                    formData.append('files', element);\n                });\n            }\n            setLoading(\n                postNotices(formData, data => {\n                    if (data?.message.indexOf('성공') > -1) {\n                        // modal.info('저장 되었습니다.');\n                        history.push('/partner/notice/list');\n                    } else {\n                        modal.warn('저장에 실패 했습니다.');\n                    }\n                })\n            );\n        });\n    };\n\n    return (\n        <>\n            <section className=\"page_content\">\n                <Breadcrumb className=\"title-navi__navi\">\n                    <Breadcrumb.Item className=\"title-navi__navi__home\">FAQ</Breadcrumb.Item>\n                    <Breadcrumb.Item className=\"title-navi__navi__parent\">FAQ 등록</Breadcrumb.Item>\n                </Breadcrumb>\n                <NoticeForm\n                    form={form}\n                    content={content}\n                    uploadFiles={uploadFiles}\n                    setUploadFiles={setUploadFiles}\n                    setContent={setContent}\n                    setIsChaged={setIsChaged}\n                    userInfo={userInfo}\n                />\n                <Row justify=\"center\">\n                    <Button\n                        type=\"primary\"\n                        onClick={() => {\n                            if (isChaged) {\n                                modal.msg('104', '', () => {\n                                    history.goBack();\n                                });\n                            } else {\n                                history.goBack();\n                            }\n                        }}>\n                        이전\n                    </Button>\n                    <Button type=\"primary\" onClick={onFinish}>\n                        등록\n                    </Button>\n                </Row>\n            </section>\n        </>\n    );\n};\n\nexport default AddFaqContainer;\n","import React from 'react';\nimport Container from './NewFaqContainer';\n\nconst FaqNew: React.FunctionComponent = () => {\n    const Header = {\n        title: ''\n    };\n\n    return <Container />;\n};\n\nexport default FaqNew;\n"],"names":["props","mode","form","content","setContent","setIsChaged","uploadFiles","setUploadFiles","boadrFiles","setBoadrFiles","onClickDownLoad","userInfo","useState","useEffect","layout","onChange","className","labelCol","span","wrapperCol","name","hidden","label","initialValue","options","useOptions","rules","required","message","value","height","e","setFieldsValue","style","marginTop","emptyString","moment","format","getFieldValue","useUser","isChaged","history","useHistory","Form","setLoading","useLoding","resetFields","NoticeForm","justify","type","onClick","modal","goBack","values","validateFields","then","params","isTopFix","formData","FormData","Object","keys","forEach","key","undefined","append","element","postNotices","data","indexOf","push"],"sourceRoot":""}