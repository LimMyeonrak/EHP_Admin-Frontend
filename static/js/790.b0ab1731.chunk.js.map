{"version":3,"file":"static/js/790.b0ab1731.chunk.js","mappings":"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","sources":["components/rangePicker/index.tsx","pages/popup/comp/PopupForm.tsx","pages/popup/comp/NewReply.tsx","pages/popup/comp/Reply.tsx","pages/popup/detail/DetailContainer.tsx","pages/popup/detail/index.tsx","pages/popup/comp/PopupFilter.tsx","pages/popup/comp/PopupList.tsx","pages/popup/list/PopupList.tsx","pages/popup/list/index.tsx","types/Common/PopupOptions.ts"],"sourcesContent":["/* eslint-disable */\nimport React, { useState } from 'react';\nimport { Col, DatePicker, Form, FormInstance, Row, Select } from 'antd';\nimport moment from 'moment';\n\ninterface FilterRangePickerProps {\n    form: FormInstance<any>; // form 전달\n    defaultRange?: number; // 초기 설정 값\n}\n\nconst RangePicker: React.FunctionComponent<FilterRangePickerProps> = props => {\n    const { form, defaultRange = 30 } = props;\n    const [range, setRange] = useState(defaultRange);\n\n    const onChangeDateRange = e => {\n        setRange(e);\n        if (e !== 999) {\n            form.setFieldsValue({ startDate: moment().add(-e, 'days'), endDate: moment() });\n        }\n    };\n\n    const onChange = () => {\n        setRange(999);\n    };\n\n    return (\n        <Row align=\"middle\" justify=\"start\">\n            <Form.Item\n                name=\"startDate\"\n                label=\"\"\n                //initialValue={defaultRange !== 999 ? moment().add(-defaultRange, 'days') : moment()}\n                initialValue={moment()}\n                style={{ width: '130px', marginLeft: '10px', marginRight: '10px' }}>\n                <DatePicker onChange={onChange} />\n            </Form.Item>\n            <Col>~</Col>\n            <Form.Item\n                name=\"endDate\"\n                label=\"\"\n                initialValue={moment()}\n                style={{ width: '130px', marginLeft: '10px', marginRight: '10px' }}>\n                <DatePicker onChange={onChange} />\n            </Form.Item>\n        </Row>\n    );\n};\n\nexport default RangePicker;\n","/* eslint-disable */\nimport { DownloadOutlined } from '@ant-design/icons';\nimport { Row, Col, Select, Input, Button, Checkbox, Form, Radio, Collapse, Space } from 'antd';\nimport { CustomUpload, Editor, FilterRangePicker } from 'components';\nimport RangePicker from 'components/rangePicker';\nimport CustomDownload from 'components/customDownload';\nimport { emptyString } from 'helper/recycle';\nimport { uniqueId } from 'lodash';\nimport moment from 'moment';\nimport ManagerPopup from 'Popups/Manager';\nimport React, { useEffect, useRef, useState } from 'react';\nimport {\n    typeOptions,\n    useOptions,\n    projectOptions,\n    companyOptions,\n    closeButtonUseOptions,\n    closeButtonCookieOptions,\n    buttonOptions\n} from 'types/Common/PopupOptions';\n\nconst NoticeForm = props => {\n    const {\n        mode,\n        form,\n        content,\n        setContent,\n        uploadFiles,\n        setUploadFiles,\n        boadrFiles,\n        setBoadrFiles,\n        onClickDownLoad,\n        setIsChaged,\n        userInfo\n    } = props;\n    const [visibleUrlInput, setVisibleUrlInput] = useState<boolean>(false);\n    const [imgMsgValue, setImgMsgValue] = useState(0);\n    const onchange = e => {\n        if (content !== e) {\n            form.setFieldsValue({ content: e });\n            setContent(e);\n            setIsChaged(true);\n        }\n    };\n\n    const onChangePopupType = e => {\n        setImgMsgValue(e);\n    };\n\n    const fileMsg = () => {\n        switch (imgMsgValue) {\n            case 1:\n                return <p>* 이미지는 000px X 000px로 업로드하여 주세요.(확장자 .png) 풀팝업 사이즈 안내 </p>;\n            case 2:\n                return <p>* 이미지는 000px X 000px로 업로드하여 주세요.(확장자 .png) 바텀시트 팝업 사이즈 안내</p>;\n            case 3:\n                return <p>* 이미지는 000px X 000px로 업로드하여 주세요.(확장자 .png) 일반 팝업 사이즈 안내</p>;\n            default:\n                return <p></p>;\n        }\n    };\n\n    const onChangeButtonSet = e => {\n        setVisibleUrlInput(e.target.value === 1);\n    };\n\n    const onChangeNoticeTarget = e => {\n        //setVisibleTargetSearch(e === 3);\n    };\n\n    const setManager = e => {\n        const id = e.map(item => {\n            return item.id;\n        });\n        form.setFieldsValue({ noticeTargetIds: id.toString() });\n    };\n\n    useEffect(() => {\n        fileMsg();\n        return () => {\n            //\n        };\n    }, [imgMsgValue]);\n\n    useEffect(() => {\n        setIsChaged(false);\n        return () => {\n            //\n        };\n    }, []);\n\n    return (\n        <Form\n            layout=\"horizontal\"\n            form={form}\n            onChange={() => {\n                setIsChaged(true);\n            }}>\n            <Row className=\"content__contentbox__table\">\n                <Form.Item\n                    labelCol={{ span: 0 }}\n                    wrapperCol={{ span: 0 }}\n                    name=\"articleIdx\"\n                    hidden\n                    label=\"\"\n                    initialValue={null}>\n                    <Input />\n                </Form.Item>\n                <Col className=\"label\" span={4}>\n                    노출여부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item labelCol={{ span: 0 }} wrapperCol={{ span: 10 }} name=\"isUse\" label=\"\" initialValue={0}>\n                        <Radio.Group options={useOptions} />\n                    </Form.Item>\n                </Col>\n\n                <Col className=\"label required\" span={4}>\n                    팝업타입\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item name=\"popupType\" label=\"\" style={{ width: '200px' }} initialValue={0}>\n                        <Select onChange={onChangePopupType} options={typeOptions} />\n                    </Form.Item>\n                </Col>\n\n                <Col className=\"label required\" span={4}>\n                    기업 선택\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item name=\"companyTarget\" label=\"\" style={{ width: '200px' }} initialValue={0}>\n                            <Select onChange={onChangeNoticeTarget} options={companyOptions} />\n                        </Form.Item>\n\n                        <Form.Item name=\"projectTarget\" label=\"\" style={{ width: '200px' }} initialValue={0}>\n                            <Select onChange={onChangeNoticeTarget} options={projectOptions} />\n                        </Form.Item>\n                    </Row>\n                </Col>\n\n                <Col className=\"label required\" span={4}>\n                    제목\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"title\"\n                        label=\"\"\n                        rules={[{ required: true, message: '제목을 입력해주세요.' }]}>\n                        <Input />\n                    </Form.Item>\n                </Col>\n\n                <Col className=\"label required\" span={4}>\n                    노출기간\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <RangePicker form={form} />\n                </Col>\n\n                <Col className=\"label\" span={4}>\n                    첨부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n                        <CustomDownload downloadFiles={boadrFiles} setDownloadFiles={setBoadrFiles} />\n                        <CustomUpload\n                            uploadFiles={uploadFiles}\n                            setUploadFiles={setUploadFiles}\n                            maxCount={boadrFiles ? 3 - boadrFiles.length : 3}\n                        />\n                        {fileMsg()}\n                    </Space>\n                </Col>\n\n                <Col className=\"label required\" span={4}>\n                    닫기 버튼 설정\n                </Col>\n\n                <Col className=\"data\" span={20}>\n                    <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n                        <Form.Item\n                            labelCol={{ span: 0 }}\n                            wrapperCol={{ span: 10 }}\n                            name=\"isCloseUse\"\n                            label=\"\"\n                            initialValue={0}>\n                            <Radio.Group options={closeButtonUseOptions} />\n                        </Form.Item>\n                        <Form.Item\n                            labelCol={{ span: 0 }}\n                            wrapperCol={{ span: 10 }}\n                            name=\"isButton\"\n                            label=\"\"\n                            initialValue={0}>\n                            <Radio.Group options={closeButtonCookieOptions} />\n                        </Form.Item>\n                    </Space>\n                </Col>\n\n                <Col className=\"label\" span={4}>\n                    버튼 설정\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item name=\"isConfirm\" label=\"\" style={{ width: '320px' }} initialValue={0}>\n                            <Radio.Group options={buttonOptions} onChange={onChangeButtonSet} />\n                        </Form.Item>\n\n                        {visibleUrlInput && (\n                            <>\n                                <Form.Item\n                                    name=\"noticeTargetIds\"\n                                    label=\"\"\n                                    initialValue=\"\"\n                                    style={{ width: '400px', marginLeft: '0px', marginRight: '0px' }}>\n                                    <Input />\n                                </Form.Item>\n                            </>\n                        )}\n                    </Row>\n                </Col>\n            </Row>\n        </Form>\n    );\n};\nexport default NoticeForm;\n","/* eslint-disable */\nimport { DownloadOutlined, UploadOutlined } from '@ant-design/icons';\nimport { Row, Col, Input, Button, Upload } from 'antd';\nimport { apiFileDownload } from 'api/common/commonApi';\nimport { postReply, putReply } from 'api/notices/noticesApi';\nimport { CustomUpload } from 'components';\nimport CustomDownload from 'components/customDownload';\nimport modal from 'helper/customModal';\nimport React, { useEffect, useState } from 'react';\n\nconst { TextArea } = Input;\nconst NewReply = props => {\n    const {\n        userInfo,\n        boardType,\n        articleIdx,\n        articleAttachType,\n        articleType,\n        replyLevel,\n        parentReplyIdx,\n        replyItem,\n        refresh,\n        isPopup\n    } = props;\n    const [uploadFiles, setUploadFiles] = useState<File[]>([]);\n    const [boadrFiles, setBoadrFiles] = useState<any[]>([]);\n    const [content, setContent] = useState('');\n\n    const onSaveReply = () => {\n        if (content === '') {\n            modal.msg('002', '댓글');\n        } else {\n            const formData = new FormData();\n            formData.append('boardType', boardType);\n            formData.append('articleAttachType', articleAttachType);\n            formData.append('articleType', articleType);\n            if (parentReplyIdx) {\n                formData.append('parentReplyIdx', parentReplyIdx);\n            } else {\n                formData.append('parentReplyIdx', null);\n            }\n            formData.append('replyLevel', replyLevel);\n            formData.append('articleIdx', articleIdx);\n            formData.append('replyContent', content);\n            console.log('uploadFiles');\n            console.log(uploadFiles);\n\n            if (uploadFiles) {\n                uploadFiles.forEach(element => {\n                    formData.append('files', element);\n                });\n            }\n            if (replyItem) {\n                if (boadrFiles.length > 0) {\n                    boadrFiles.map(item => {\n                        return formData.append('includeFileIdxs', item.idx);\n                    });\n                }\n                formData.append('replyIdx', replyItem.replyIdx);\n                putReply({ data: formData }, data => {\n                    if (data?.message.indexOf('성공') > -1) {\n                        setContent('');\n                        setUploadFiles([]);\n                        // modal.info('저장 되었습니다.');\n                        if (refresh) {\n                            refresh();\n                        }\n                    } else {\n                        modal.warn('저장에 실패 했습니다.');\n                    }\n                });\n            } else {\n                postReply({ data: formData }, data => {\n                    if (data?.message.indexOf('성공') > -1) {\n                        setContent('');\n                        setUploadFiles([]);\n                        // modal.info('저장 되었습니다.');\n                        if (refresh) {\n                            refresh();\n                        }\n                    } else {\n                        modal.warn('저장에 실패 했습니다.');\n                    }\n                });\n            }\n        }\n    };\n    const onChange = e => {\n        const { value } = e.target;\n        setContent(value);\n    };\n    useEffect(() => {\n        if (replyItem) {\n            setContent(replyItem.replyContent);\n            setBoadrFiles(replyItem.replyAttachList);\n        }\n    }, [replyItem]);\n    const onClickDownLoad = (e: any) => {\n        apiFileDownload({ idx: e.idx, fileName: e.fileName });\n    };\n    return (\n        <>\n            <Row justify=\"space-between\">\n                <Col span={24}>\n                    {replyItem\n                        ? `${replyItem.registerName} (${replyItem.registDate})`\n                        : `${userInfo.name} (${userInfo.userId})`}\n                </Col>\n                <Col span={24}>\n                    <TextArea rows={5} onChange={onChange} value={content} />\n                </Col>\n            </Row>\n            {boadrFiles.length > 0 && (\n                <Row justify=\"space-between\">\n                    <CustomDownload downloadFiles={boadrFiles} setDownloadFiles={setBoadrFiles} />\n                </Row>\n            )}\n            <Row justify=\"space-between\" style={{ marginTop: '10px' }}>\n                <Col style={{ marginLeft: `${isPopup ? '0px' : '0px'}` }}>\n                    <div className=\"upload_item_inline\">\n                        <CustomUpload\n                            uploadFiles={uploadFiles}\n                            setUploadFiles={setUploadFiles}\n                            maxCount={boadrFiles ? 3 - boadrFiles.length : 3}\n                        />\n                    </div>\n                </Col>\n                <Col style={{ textAlign: 'end' }}>\n                    <Button type=\"primary\" onClick={onSaveReply}>\n                        {replyItem ? '수정' : '입력'}\n                    </Button>\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default NewReply;\n","import { EnterOutlined, FileOutlined } from '@ant-design/icons';\nimport { Row, Col, Button } from 'antd';\nimport { deleteReply } from 'api/partner/noticesApi';\nimport modal from 'helper/customModal';\nimport { apiFileDownload } from 'api/common/commonApi';\nimport useUser from 'hooks/user';\nimport { uniqueId } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport useLoding from 'hooks/useLoding';\nimport ReplyPopup from 'Popups/Reply';\nimport NewReply from './NewReply';\n\nconst Reply = props => {\n    const { boardType, reply, articleAttachType, articleIdx, articleType, refresh } = props;\n    const { userInfo } = useUser();\n    const [replys, setReplys] = useState<any>();\n    const { setLoading } = useLoding();\n\n    const onDeleteReply = param => {\n        const callApi = () => {\n            deleteReply(\n                {\n                    boardType: Number(param.boardType),\n                    articleType: param.articleType,\n                    replyIdx: param.replyIdx,\n                    articleIdx: param.articleIdx,\n                    articleAttachType\n                },\n                data => {\n                    if (data?.message.indexOf('성공') > -1) {\n                        modal.info('저장 되었습니다.');\n                        refresh();\n                    } else {\n                        modal.warn('저장에 실패 했습니다.');\n                    }\n                }\n            );\n        };\n        modal.msg('102', '', callApi, () => {\n            //\n        });\n    };\n    const onClickDownLoad = (e: any) => {\n        setLoading(apiFileDownload({ idx: e.idx, fileName: e.fileName }));\n    };\n    useEffect(() => {\n        if (reply) {\n            const madeReplyData = [];\n            reply.forEach(element => {\n                if (!element.parentReplyIdx || element.parentReplyIdx === 'null') {\n                    madeReplyData.push({ ...element, children: [] });\n                }\n                madeReplyData.forEach(data => {\n                    if (Number(data.replyIdx) === Number(element.parentReplyIdx)) {\n                        data.children.push({ ...element });\n                    }\n                });\n            });\n            setReplys(madeReplyData);\n        }\n    }, [reply]);\n    return (\n        <Row\n            className=\"content__contentbox__table\"\n            style={{ borderLeft: '1px solid #E0E0E0', borderRight: '1px solid #E0E0E0' }}>\n            {replys && replys.length > 0 && (\n                <>\n                    <Col className=\"label\" span={24}>\n                        댓글 {replys.length > 0 ? `${replys.length}개` : ''}\n                    </Col>\n                    {replys &&\n                        replys.map((item, index) => {\n                            return (\n                                <Col className=\"data\" span={24} style={{ padding: '0px' }} key={uniqueId()}>\n                                    <Row\n                                        align=\"middle\"\n                                        justify=\"space-between\"\n                                        style={{\n                                            // borderTop: `${index === 0 ? 0 : 1}px solid #E0E0E0`,\n                                            minHeight: '100px',\n                                            // marginBottom: '5px'\n                                            padding: '10px'\n                                        }}>\n                                        <Col span={20}>\n                                            <Col span={24} style={{ marginBottom: '5px' }}>\n                                                {item.registerName}({item.regId}) {item.registDate}{' '}\n                                                <ReplyPopup\n                                                    button={{ name: '대댓글쓰기', type: 'text' }}\n                                                    userInfo={userInfo}\n                                                    boardType={boardType}\n                                                    articleIdx={item.articleIdx}\n                                                    articleAttachType={articleAttachType}\n                                                    articleType={articleType}\n                                                    replyLevel={Number(item.replyLevel) + 1}\n                                                    parentReplyIdx={item.replyIdx}\n                                                    refresh={refresh}\n                                                />\n                                                {item.replyAttachList.length > 0 &&\n                                                    item.replyAttachList.map(el => {\n                                                        return (\n                                                            <FileOutlined\n                                                                title={el?.fileName ? el?.fileName : ''}\n                                                                key={uniqueId()}\n                                                                onClick={() => {\n                                                                    onClickDownLoad(el);\n                                                                }}\n                                                                style={{ marginRight: '10px' }}\n                                                            />\n                                                        );\n                                                    })}\n                                            </Col>\n                                            <Col span={24}>{item.replyContent}</Col>\n                                        </Col>\n                                        <Col span={4} style={{ textAlign: 'end' }}>\n                                            {/* <Button\n                                                onClick={() => {\n                                                    // onDeleteReply(item);\n                                                }}>\n                                                수정\n                                            </Button> */}\n                                            <ReplyPopup\n                                                button={{ name: '수정', type: '' }}\n                                                userInfo={userInfo}\n                                                boardType={boardType}\n                                                articleIdx={item.articleIdx}\n                                                articleAttachType={articleAttachType}\n                                                articleType={articleType}\n                                                replyLevel={Number(item.replyLevel) + 1}\n                                                parentReplyIdx={item.replyIdx}\n                                                refresh={refresh}\n                                                replyItem={item}\n                                            />\n                                            <Button\n                                                onClick={() => {\n                                                    onDeleteReply(item);\n                                                }}>\n                                                삭제\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                    {item.children &&\n                                        item.children.map(cItem => {\n                                            return (\n                                                <Row\n                                                    align=\"middle\"\n                                                    justify=\"space-between\"\n                                                    key={uniqueId()}\n                                                    style={{\n                                                        // borderTop: `${index === 0 ? 0 : 1}px solid #E0E0E0`,\n                                                        minHeight: '100px',\n                                                        // marginBottom: '5px'\n                                                        padding: '10px',\n                                                        paddingLeft: '20px'\n                                                    }}>\n                                                    <Col span={1}>\n                                                        <EnterOutlined style={{ transform: 'scaleX(-1)' }} />\n                                                    </Col>\n                                                    <Col span={19}>\n                                                        <Col span={24} style={{ marginBottom: '5px' }}>\n                                                            {cItem.registerName}({cItem.regId}) {cItem.registDate}{' '}\n                                                            {/* <ReplyPopup\n                                                                button={{ name: '대댓글쓰기', type: 'text' }}\n                                                                userInfo={userInfo}\n                                                                boardType={boardType}\n                                                                articleIdx={cItem.articleIdx}\n                                                                articleAttachType={articleAttachType}\n                                                                articleType=\"Q\"\n                                                                replyLevel={Number(cItem.replyLevel) + 1}\n                                                                parentReplyIdx={cItem.replyIdx}\n                                                            /> */}\n                                                            {cItem.replyAttachList.length > 0 &&\n                                                                cItem.replyAttachList.map(el => {\n                                                                    return (\n                                                                        <FileOutlined\n                                                                            title={el?.fileName ? el?.fileName : ''}\n                                                                            onClick={() => {\n                                                                                onClickDownLoad(el);\n                                                                            }}\n                                                                            key={uniqueId()}\n                                                                            style={{ marginRight: '10px' }}\n                                                                        />\n                                                                    );\n                                                                })}\n                                                        </Col>\n                                                        <Col span={24}>{cItem.replyContent}</Col>\n                                                    </Col>\n                                                    <Col span={4} style={{ textAlign: 'end' }}>\n                                                        <ReplyPopup\n                                                            button={{ name: '수정', type: '' }}\n                                                            userInfo={userInfo}\n                                                            boardType={boardType}\n                                                            articleIdx={cItem.articleIdx}\n                                                            articleAttachType={articleAttachType}\n                                                            articleType={articleType}\n                                                            replyLevel={Number(cItem.replyLevel)}\n                                                            parentReplyIdx={cItem.replyIdx}\n                                                            refresh={refresh}\n                                                            replyItem={cItem}\n                                                        />\n                                                        <Button\n                                                            onClick={() => {\n                                                                onDeleteReply(cItem);\n                                                            }}>\n                                                            삭제\n                                                        </Button>\n                                                    </Col>\n                                                </Row>\n                                            );\n                                        })}\n                                </Col>\n                            );\n                        })}\n                </>\n            )}\n            <Col className=\"label\" span={4}>\n                댓글\n            </Col>\n            <Col className=\"data\" span={20}>\n                <NewReply\n                    userInfo={userInfo}\n                    boardType={boardType}\n                    articleIdx={articleIdx}\n                    articleAttachType={articleAttachType}\n                    articleType={articleType}\n                    replyLevel={0}\n                    refresh={refresh}\n                />\n            </Col>\n        </Row>\n    );\n};\nexport default Reply;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Button, Form, Space, Modal } from 'antd';\nimport { deleteNotice as apiDelete, getNotice, getNoticeAnswer, postNotices, putNotice } from 'api/partner/noticesApi';\nimport modal from 'helper/customModal';\nimport moment from 'moment';\nimport useUser from 'hooks/user';\nimport { apiFileDownload } from 'api/common/commonApi';\nimport { Answer } from 'Popups';\nimport AnswerForm from 'Popups/Answer/AnswerForm';\nimport useLoding from 'hooks/useLoding';\nimport NoticeForm from '../comp/PopupForm';\nimport NoticeDetail from '../comp/NoticeDetail';\nimport Reply from '../comp/Reply';\n\ntype propsType = {\n    articleIdx: number;\n    answerIdx: number;\n    hideModal: (e) => void;\n};\n\nconst DetailContainer = (props: propsType): any => {\n    const { articleIdx, answerIdx, hideModal } = props;\n    const { userInfo } = useUser();\n    const [content, setContent] = useState<any>();\n    const [data, setData] = useState<any>();\n    const [answerData, setAnswerData] = useState<any>();\n    const [visible, setVisible] = useState<any>();\n    const [form] = Form.useForm();\n    const [boadrFiles, setBoadrFiles] = useState<any[]>([]);\n    const [uploadFiles, setUploadFiles] = useState<File[]>([]);\n    const [modifyMode, setModifyMode] = useState<boolean>(false);\n    const [newAnswerIdx, setNewAnswerIdx] = useState<number>();\n    const [isChaged, setIsChaged] = useState<boolean>(false);\n    const [isAnsChaged, setIsAnsChaged] = useState<boolean>(false);\n    const { setLoading } = useLoding();\n\n    const onClickDownLoad = (e: any) => {\n        setLoading(apiFileDownload({ idx: e.idx, fileName: e.fileName }));\n    };\n\n    const apiCall = () => {\n        if (articleIdx !== 0) {\n            setNewAnswerIdx(null);\n            setLoading(\n                getNotice(articleIdx, data => {\n                    setData(data.result.data);\n                    setContent(data.result.data?.content);\n                    setBoadrFiles(data.result.files);\n                    const noticeData = data.result.data;\n                    form.setFieldsValue({ ...noticeData });\n                    setNewAnswerIdx(data.result.data?.answerIdx);\n                    setIsChaged(false);\n                })\n            );\n        } else {\n            form.setFieldsValue({ registerName: userInfo.name, registDate: moment().format('YYYY-MM-DD HH:mm:ss') });\n        }\n    };\n\n    const onFinish = () => {\n        form.validateFields().then(values => {\n            modal.msg('101', '', () => {\n                const params = { ...values, isTopFix: values.isTopFix ? 1 : 0 };\n                const formData = new FormData();\n\n                Object.keys(params).forEach(key => {\n                    if (params[key] !== undefined && params[key] !== null) {\n                        formData.append(key, params[key]);\n                    }\n                });\n                if (boadrFiles.length > 0) {\n                    boadrFiles.map(item => {\n                        return formData.append('includeFileIdxs', item.idx);\n                    });\n                }\n                if (uploadFiles) {\n                    uploadFiles.forEach(element => {\n                        formData.append('files', element);\n                    });\n                }\n                setLoading(\n                    putNotice({ data: formData }, data => {\n                        setIsChaged(false);\n                        setModifyMode(false);\n                        apiCall();\n                        setUploadFiles([]);\n                        modal.info('저장되었습니다.');\n                    })\n                );\n            });\n        });\n    };\n\n    const closeModal = () => {\n        if (isChaged || isAnsChaged) {\n            modal.msg('104', '', () => {\n                hideModal(false);\n            });\n        } else {\n            hideModal(false);\n        }\n    };\n    const deleteNotice = (values: any) => {\n        modal.msg(\n            newAnswerIdx !== undefined && newAnswerIdx !== null ? '105' : '102',\n            '',\n            () => {\n                apiDelete(articleIdx, data => {\n                    hideModal(true);\n                });\n            },\n            () => {\n                //\n            }\n        );\n    };\n\n    useEffect(() => {\n        apiCall();\n        return () => {\n            setNewAnswerIdx(null);\n            setIsChaged(false);\n            setIsAnsChaged(false);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (newAnswerIdx) {\n            setLoading(\n                getNoticeAnswer(newAnswerIdx, data => {\n                    setAnswerData(data);\n                })\n            );\n        } else {\n            setAnswerData(null);\n        }\n    }, [newAnswerIdx]);\n\n    return (\n        <>\n            <Modal\n                visible={articleIdx !== 0}\n                title=\"공지사항 상세\"\n                onCancel={closeModal}\n                className=\"detail_modal\"\n                footer={<></>}\n                width={1400}>\n                {/* {modifyMode ? ( \n                <NoticeForm\n                    form={form}\n                    data={data}\n                    content={content}\n                    setContent={setContent}\n                    boadrFiles={boadrFiles}\n                    onClickDownLoad={onClickDownLoad}\n                    uploadFiles={uploadFiles}\n                    setUploadFiles={setUploadFiles}\n                    setIsChaged={setIsChaged}\n                />\n                \n                ) : (\n                    <>\n                        {data && <NoticeDetail onClickDownLoad={onClickDownLoad} data={data} boadrFiles={boadrFiles} />}\n                    </>\n                )} */}\n                <NoticeForm\n                    form={form}\n                    data={data}\n                    content={content}\n                    setContent={setContent}\n                    boadrFiles={boadrFiles}\n                    setBoadrFiles={setBoadrFiles}\n                    onClickDownLoad={onClickDownLoad}\n                    uploadFiles={uploadFiles}\n                    setUploadFiles={setUploadFiles}\n                    setIsChaged={setIsChaged}\n                />\n                <Row justify=\"end\" style={{ marginBottom: '10px' }}>\n                    <Col>\n                        <Space>\n                            {/* {modifyMode ? (\n                                <>\n                                    <Button name=\"저장\" type=\"primary\" onClick={onFinish}>\n                                        저장\n                                    </Button>\n                                    <Button\n                                        name=\"취소\"\n                                        onClick={() => {\n                                            setModifyMode(!modifyMode);\n                                        }}>\n                                        취소\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    name=\"수정\"\n                                    type=\"primary\"\n                                    onClick={() => {\n                                        setModifyMode(!modifyMode);\n                                    }}>\n                                    수정\n                                </Button>\n                            )} */}\n                            <Button name=\"수정\" type=\"primary\" onClick={onFinish}>\n                                수정\n                            </Button>\n                            <Button name=\"삭제\" type=\"primary\" onClick={deleteNotice}>\n                                삭제\n                            </Button>\n                            {!answerData && <Answer articleIdx={articleIdx} refresh={apiCall} />}\n                            <Button name=\"닫기\" onClick={closeModal}>\n                                닫기\n                            </Button>\n                        </Space>\n                    </Col>\n                </Row>\n                {data && (\n                    <Reply\n                        reply={data?.replyList}\n                        boardType={0}\n                        articleAttachType={5}\n                        articleIdx={articleIdx}\n                        articleType=\"Q\"\n                        refresh={apiCall}\n                    />\n                )}\n                {/* 답글있을시 처리 */}\n                {answerData && (\n                    <AnswerForm\n                        viewMode\n                        data={answerData}\n                        articleIdx={articleIdx}\n                        refresh={apiCall}\n                        setIsAnsChaged={setIsAnsChaged}\n                    />\n                )}\n                {answerData && answerData.result?.data && (\n                    <Reply\n                        reply={answerData.result.data.answerReplyList}\n                        boardType={0}\n                        articleAttachType={6}\n                        articleIdx={answerData.result.data.answerIdx}\n                        articleType=\"A\"\n                        refresh={apiCall}\n                    />\n                )}\n            </Modal>\n        </>\n    );\n};\n\nexport default DetailContainer;\n","import React from 'react';\nimport Container from './DetailContainer';\n\ninterface INotiesPopup {\n    articleIdx: number;\n    answerIdx: number;\n    hideModal: (e) => void;\n}\nconst NotidceDetail: React.FunctionComponent<INotiesPopup> = ({ articleIdx, hideModal, answerIdx }) => {\n    return <Container articleIdx={articleIdx} hideModal={hideModal} answerIdx={answerIdx} />;\n};\n\nexport default NotidceDetail;\n","import { Row, Col, Select, DatePicker, Input, Button, Checkbox, Breadcrumb, Form, Radio } from 'antd';\nimport { FilterRangePicker } from 'components';\nimport moment from 'moment';\nimport React, { useState } from 'react';\nimport {\n    companyOptions,\n    projectOptions,\n    typeOptions,\n    dateTypeOptions,\n    InquiryUseOptions\n} from 'types/Common/PopupOptions';\nimport ManagerPopup from 'Popups/Manager';\n\nconst PopupFilter = props => {\n    const { form } = props;\n    const [visibleTargetSearch, setVisibleTargetSearch] = useState<boolean>(false);\n    const onChangeDateRange = e => {\n        if (e !== 999) {\n            form.setFieldsValue({ startDate: moment().add('day', -e), endDate: moment() });\n        }\n    };\n    const onChangeNoticeTarget = e => {\n        setVisibleTargetSearch(e === 3);\n    };\n    const setManager = e => {\n        const id = e.map(item => {\n            return item.id;\n        });\n        form.setFieldsValue({ noticeTargetIds: id.toString() });\n    };\n\n    return (\n        <>\n            <Row className=\"content__contentbox__table\">\n                <Col className=\"label\" span={4}>\n                    기간\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row align=\"middle\" justify=\"start\">\n                        <Form.Item name=\"searchDateType\" initialValue={0} label=\"\" style={{ width: '200px' }}>\n                            <Select options={dateTypeOptions} />\n                        </Form.Item>\n                        <FilterRangePicker form={form} />\n                    </Row>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    노출여부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item labelCol={{ span: 0 }} wrapperCol={{ span: 24 }} name=\"isUse\" initialValue={0} label=\"\">\n                        <Radio.Group options={InquiryUseOptions} />\n                    </Form.Item>\n                </Col>\n\n                <Col className=\"label \" span={4}>\n                    대상\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item name=\"companyTarget\" initialValue={0} label=\"\" style={{ width: '200px' }}>\n                            <Select options={companyOptions} />\n                        </Form.Item>\n\n                        <Form.Item name=\"projectTarget\" initialValue={0} label=\"\" style={{ width: '200px' }}>\n                            <Select options={projectOptions} />\n                        </Form.Item>\n                    </Row>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    타입구분\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"isConfirm\"\n                        initialValue={0}\n                        label=\"\">\n                        <Radio.Group options={typeOptions} />\n                    </Form.Item>\n                </Col>\n\n                <Col className=\"label \" span={4}>\n                    검색어\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item\n                            name=\"searchWord\"\n                            label=\"\"\n                            initialValue=\"\"\n                            style={{ width: '400px', marginLeft: '0px', marginRight: '0px' }}>\n                            <Input />\n                        </Form.Item>\n                    </Row>\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default PopupFilter;\n","/* eslint-disable */\nimport { Row, Col, Button } from 'antd';\nimport { uniqueId } from 'lodash';\nimport { Pagenation } from 'components';\nimport React from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { EnterOutlined } from '@ant-design/icons';\n\nconst NoticeList = props => {\n    const {\n        data,\n        page,\n        onRowSelected,\n        onChangePage,\n        onShowSizeChange,\n        moveAddPage,\n        fileDownload,\n        setGridApi,\n        onClickDelete\n    } = props;\n    const onGridReady = params => {\n        setGridApi(params.api);\n        // setGridColumnApi(params.columnApi);\n    };\n    const getStsContent = params => {\n        if (params.data) {\n            return (\n                <>\n                    <div>\n                        {params.value}\n                        <span style={{ color: 'red' }}>\n                            {Number(params.data?.articleReplyCnt) > 0 ? `  [${params.data?.articleReplyCnt}]` : ''}\n                        </span>\n                    </div>\n                    {params.data?.answerTitle && (\n                        <div style={{ paddingLeft: '10px', marginTop: '-5px' }}>\n                            <div style={{ display: 'inline-flex' }}>\n                                <EnterOutlined style={{ transform: 'scaleX(-1)' }} />\n                            </div>\n                            {params.data?.answerTitle}\n                            <span style={{ color: 'red' }}>\n                                {Number(params.data?.articleAnswerReplyCnt) > 0\n                                    ? `  [${params.data?.articleAnswerReplyCnt}]`\n                                    : ''}\n                            </span>\n                        </div>\n                    )}\n                </>\n            );\n        }\n        return <div />;\n    };\n    const gridOptions = {\n        columnDefs: [\n            {\n                field: 'number',\n                headerName: 'No.',\n                minWidth: 30,\n                headerCheckboxSelection: true,\n                checkboxSelection: true\n            },\n            {\n                field: 'noticeTargetFormat',\n                headerName: '대상'\n            },\n            {\n                field: 'title',\n                headerName: '제목',\n                minWidth: 300,\n                cellClass: 'tal',\n                cellRendererFramework: getStsContent\n            },\n            {\n                field: 'isConfirmFormat',\n                headerName: '확인여부',\n                minWidth: 30\n            },\n            {\n                field: 'isTopFixFormat',\n                headerName: '상단고정',\n                minWidth: 30\n            },\n            {\n                field: 'isUseFormat',\n                headerName: '노출',\n                minWidth: 60\n            },\n            {\n                field: 'registerName',\n                headerName: '등록자'\n            },\n            {\n                field: 'registDate',\n                headerName: '등록일시'\n            },\n            {\n                field: 'updaterName',\n                headerName: '최종수정자'\n            },\n            {\n                field: 'updateDate',\n                headerName: '최종수정일시'\n            }\n        ],\n        headerHeight: 35,\n        rowHeight: 41,\n        defaultColDef: {\n            flex: 1,\n            minWidth: 120,\n            editable: false,\n            resizable: true,\n            sortable: true\n        },\n        suppressRowClickSelection: true,\n        rowSelection: 'multiple'\n    };\n    return (\n        <div className=\"ag-grid-custom\">\n            <div style={{ backgroundColor: 'white', padding: '20px' }}>\n                <Row key={uniqueId()} style={{ marginBottom: '10px' }}>\n                    <Col span={12}>\n                        {/* <Button type=\"primary\" onClick={moveAddPage}>\n                            신규등록\n                        </Button> */}\n                    </Col>\n                    <Col span={12} style={{ textAlign: 'end' }}>\n                        <Button type=\"primary\" onClick={moveAddPage}>\n                            등록\n                        </Button>\n                        <Button type=\"primary\" onClick={onClickDelete}>\n                            삭제\n                        </Button>\n                        {/* &nbsp;\n                        <Button type=\"primary\" onClick={fileDownload}>\n                            엑셀다운로드\n                        </Button> */}\n                    </Col>\n                </Row>\n                <div\n                    className=\"ag-grid-custom__grid ag-theme-balham\"\n                    // style={{ width: '100%', height: '48.362vh' }}>\n                    style={{ width: '100%', height: '450px' }}>\n                    <AgGridReact\n                        rowData={data.list}\n                        gridOptions={gridOptions}\n                        onGridReady={onGridReady}\n                        enableRangeSelection\n                        onRowDoubleClicked={onRowSelected}\n                        enableBrowserTooltips\n                    />\n                </div>\n                <div className=\"page-box\" style={{ textAlign: 'center', marginTop: '10px' }}>\n                    <Pagenation\n                        total={data.total}\n                        current={page}\n                        onChange={onChangePage}\n                        showSizeChanger\n                        defaultPageSize={10}\n                        onShowSizeChange={onShowSizeChange}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default NoticeList;\n","/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Row, Col, Select, DatePicker, Input, Button, Checkbox, Breadcrumb, Form, Radio, Modal } from 'antd';\nimport { uniqueId } from 'lodash';\nimport { apiExcelFileDownload, deleteNoticeAnswer, deleteNotices, getNotices } from 'api/partner/noticesApi';\nimport { numberWithCommas } from 'helper/recycle';\nimport { useHistory } from 'react-router-dom';\nimport DetailContainer from '../detail';\nimport PopupFilter from '../comp/PopupFilter';\nimport PopupList from '../comp/PopupList';\nimport { apiFileDownload } from 'api/common/commonApi';\nimport modal from 'helper/customModal';\nimport useLoding from 'hooks/useLoding';\n\nconst PdopupListContent: React.FunctionComponent = () => {\n    const [rowDatas, setRowDatas] = useState<any>({});\n    const [total, setTotal] = useState(0);\n    const [selectItem, setSelectItem] = useState<any>();\n    const [form] = Form.useForm();\n    const [searchParams, setSearchParams] = useState<any>({});\n    const [gridApi, setGridApi] = useState(null);\n    const history = useHistory();\n    const { setLoading } = useLoding();\n\n    const onChangePage = page => {\n        setSearchParams({ ...searchParams, page: page });\n        handleSearchData({ ...searchParams, page: page });\n    };\n    const onShowSizeChange = (page, size) => {\n        console.log(page, ' : ', size);\n        // setSearchParams({ ...searchParams, page: page });\n    };\n    const onSearch = () => {\n        let searchValues = form.getFieldsValue();\n        searchValues.startDate = moment(searchValues.startDate).format('yyyy-MM-DD');\n        searchValues.endDate = moment(searchValues.endDate).format('yyyy-MM-DD');\n\n        searchValues.isTopFix = searchValues.isTopFix === 'all' ? undefined : searchValues.isTopFix;\n        setSearchParams({ ...searchValues, page: 1, limit: 10 });\n        handleSearchData({ ...searchValues, page: 1, limit: 10 });\n    };\n\n    const handleSearchData = param => {\n        setLoading(\n            getNotices(param, data => {\n                setRowDatas(data?.result);\n                setTotal(data?.result.total);\n            })\n        );\n    };\n    const moveAddPage = param => {\n        history.push('/partner/notice/new');\n    };\n    useEffect(() => {\n        // handleSearchData(searchParams);\n        onSearch();\n    }, []);\n\n    const onRowSelected = event => {\n        // history.push(`/notices/notice/${event.data.articleIdx}`);\n        setSelectItem(event.data);\n    };\n    const hideModal = isChaged => {\n        // history.push(`/notices/notice/${event.data.articleIdx}`);\n        setSelectItem(undefined);\n        if (isChaged) {\n            handleSearchData(searchParams);\n        }\n    };\n    const fileDownload = () => {\n        setLoading(\n            apiExcelFileDownload({\n                url: '/board-api/cms/notices/excel?page=1&limit=30&searchDateType=0&startDate=2022-02-10&endDate=2022-02-12&isConfirm=1&isTopFix=&isUse=1&searchRegisterName=&searchWord=&noticeTargetIds=&targetIds=&userId=&noticeTarget=1&isTopFix=&searchRegisterName=&searchWord=&noticeTargetIds=&targetIds=&userId=',\n                fileNm: `공지사항_${moment().format('yyyyMMddHHmmss')}.xls`,\n                data: searchParams\n            })\n        );\n    };\n    const onClickDelete = () => {\n        const nodes = gridApi.getSelectedNodes();\n        let answerIdx = [];\n        const idxs = nodes.map(item => {\n            if (item.data.answerIdx !== null) {\n                answerIdx.push({ articleIdx: item.data.articleIdx, answerIdx: item.data.answerIdx });\n            }\n            return item.data.articleIdx;\n        });\n        if (idxs.length === 0) {\n            return modal.msg('001');\n        }\n        modal.msg(answerIdx.length > 0 ? '105' : '102', '', () => {\n            // 답변 한번에 삭제 하는 API 없어서 임시로\n            answerIdx.length > 0 &&\n                answerIdx.map(item => {\n                    return deleteNoticeAnswer({ articleIdx: item.articleIdx, answerIdx: item.answerIdx }, () => {\n                        //\n                    });\n                });\n            setLoading(\n                deleteNotices({ noticeTargetIds: idxs.toString() }, () => {\n                    onSearch();\n                })\n            );\n        });\n    };\n    return (\n        <>\n            <section className=\"page_content\">\n                <Breadcrumb className=\"title-navi__navi\">\n                    <Breadcrumb.Item className=\"title-navi__navi__home\">팝업관리</Breadcrumb.Item>\n                    <Breadcrumb.Item className=\"title-navi__navi__parent\">팝업 목록</Breadcrumb.Item>\n                </Breadcrumb>\n                <Form form={form} layout=\"horizontal\">\n                    <Row align=\"bottom\" key={uniqueId()} style={{ marginBottom: '10px', marginTop: '-12px' }}>\n                        <Col span={12}>검색조건</Col>\n                        <Col span={12} style={{ textAlign: 'end' }}>\n                            <Button type=\"primary\" htmlType=\"submit\" onClick={onSearch}>\n                                조회\n                            </Button>\n                            &nbsp;\n                            <Button type=\"primary\" htmlType=\"reset\">\n                                초기화\n                            </Button>\n                        </Col>\n                    </Row>\n                    <PopupFilter form={form} />\n                </Form>\n                <Row align=\"bottom\" key={uniqueId()} style={{ marginBottom: '10px', marginTop: '-12px' }}>\n                    <Col span={24}>\n                        검색결과 : <span style={{ color: 'red' }}>({numberWithCommas(total)}건)</span>\n                    </Col>\n                </Row>\n                {rowDatas && (\n                    <PopupList\n                        data={rowDatas}\n                        page={searchParams?.page}\n                        onRowSelected={onRowSelected}\n                        onChangePage={onChangePage}\n                        onShowSizeChange={onShowSizeChange}\n                        moveAddPage={moveAddPage}\n                        fileDownload={fileDownload}\n                        setGridApi={setGridApi}\n                        onClickDelete={onClickDelete}\n                    />\n                )}\n            </section>\n            <div>\n                {selectItem && (\n                    <DetailContainer\n                        articleIdx={selectItem.articleIdx}\n                        hideModal={hideModal}\n                        answerIdx={selectItem.answerIdx}\n                    />\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default PdopupListContent;\n","import React from 'react';\nimport PopupListContent from './PopupList';\n\nconst PopupList: React.FunctionComponent = () => {\n    const Header = {\n        title: ''\n    };\n\n    return <PopupListContent />;\n};\n\nexport default PopupList;\n","export const useOptions = [\n    { label: '대기', value: 0 },\n    { label: '노출', value: 1 }\n];\n\nexport const typeOptions = [\n    { label: '타입 선택', value: 0 },\n    { label: '풀팝업', value: 1 },\n    { label: '바텀시트 팝업', value: 2 },\n    { label: '일반 팝업', value: 3 }\n];\n\nexport const companyOptions = [\n    { label: '전체', value: 0 },\n    { label: 'SK하이닉스', value: 1 },\n    { label: '삼성전자', value: 2 },\n    { label: 'LG전자', value: 3 },\n    { label: 'LG유플러스', value: 4 }\n];\n\nexport const projectOptions = [\n    { label: '전체', value: 0 },\n    { label: '2022 케어프로젝트', value: 1 },\n    { label: '2022 첼린지', value: 2 }\n];\n\nexport const closeButtonUseOptions = [\n    { label: '미사용', value: 0 },\n    { label: '사용', value: 1 }\n];\n\nexport const closeButtonCookieOptions = [\n    { label: '다시 보지 않기', value: 0 },\n    { label: '3일간', value: 1 },\n    { label: '5일간', value: 2 },\n    { label: '7일간', value: 3 }\n];\n\nexport const buttonOptions = [\n    { label: '확인(팝업 닫힘)', value: 0 },\n    { label: '자세히 보기(URL 연결)', value: 1 }\n];\n\nexport const dateTypeOptions = [\n    { label: '등록일', value: 0 },\n    { label: '최종수정일', value: 1 }\n];\n\nexport const InquiryUseOptions = [\n    { label: '전체', value: 0 },\n    { label: '노출', value: 1 },\n    { label: '대기', value: 2 },\n    { label: '종료', value: 3 }\n];\n"],"names":["props","form","defaultRange","useState","setRange","onChange","align","justify","name","label","initialValue","moment","style","width","marginLeft","marginRight","mode","uploadFiles","content","setContent","setUploadFiles","boadrFiles","setBoadrFiles","setIsChaged","onClickDownLoad","userInfo","visibleUrlInput","setVisibleUrlInput","imgMsgValue","setImgMsgValue","fileMsg","onChangeNoticeTarget","e","useEffect","layout","className","labelCol","span","wrapperCol","hidden","options","useOptions","typeOptions","companyOptions","projectOptions","rules","required","message","direction","size","display","downloadFiles","setDownloadFiles","maxCount","length","closeButtonUseOptions","closeButtonCookieOptions","buttonOptions","target","value","TextArea","Input","boardType","articleIdx","articleAttachType","articleType","replyLevel","parentReplyIdx","replyItem","refresh","isPopup","replyContent","replyAttachList","registerName","registDate","userId","rows","marginTop","textAlign","type","onClick","modal","formData","FormData","append","console","log","forEach","element","map","item","idx","replyIdx","putReply","data","indexOf","postReply","reply","useUser","replys","setReplys","setLoading","useLoding","onDeleteReply","param","deleteReply","Number","apiFileDownload","fileName","madeReplyData","push","children","borderLeft","borderRight","index","padding","minHeight","marginBottom","regId","button","el","FileOutlined","title","uniqueId","cItem","paddingLeft","EnterOutlined","transform","hideModal","answerIdx","setData","answerData","setAnswerData","Form","setModifyMode","newAnswerIdx","setNewAnswerIdx","isChaged","isAnsChaged","setIsAnsChaged","apiCall","getNotice","result","files","noticeData","setFieldsValue","format","closeModal","getNoticeAnswer","visible","onCancel","footer","validateFields","then","values","params","isTopFix","Object","keys","key","undefined","putNotice","apiDelete","replyList","AnswerForm","viewMode","answerReplyList","dateTypeOptions","InquiryUseOptions","page","onRowSelected","onChangePage","onShowSizeChange","moveAddPage","setGridApi","fileDownload","onClickDelete","gridOptions","columnDefs","field","headerName","minWidth","headerCheckboxSelection","checkboxSelection","cellClass","cellRendererFramework","color","articleReplyCnt","answerTitle","articleAnswerReplyCnt","headerHeight","rowHeight","defaultColDef","flex","editable","resizable","sortable","suppressRowClickSelection","rowSelection","backgroundColor","height","AgGridReact","rowData","list","onGridReady","api","enableRangeSelection","onRowDoubleClicked","enableBrowserTooltips","total","current","showSizeChanger","defaultPageSize","rowDatas","setRowDatas","setTotal","selectItem","setSelectItem","searchParams","setSearchParams","gridApi","history","useHistory","onSearch","searchValues","getFieldsValue","startDate","endDate","limit","handleSearchData","getNotices","htmlType","numberWithCommas","PopupList","event","apiExcelFileDownload","url","fileNm","nodes","getSelectedNodes","idxs","deleteNoticeAnswer","deleteNotices","noticeTargetIds","toString"],"sourceRoot":""}