{"version":3,"file":"static/js/420.ca062f00.chunk.js","mappings":"0SAiMA,IArLmB,SAAAA,GAaXA,EAXAC,KADJ,IAEIC,EAUAF,EAVAE,KACAC,EASAH,EATAG,QACAC,EAQAJ,EARAI,WACAC,EAOAL,EAPAK,YACAC,EAMAN,EANAM,eACAC,EAKAP,EALAO,WACAC,EAIAR,EAJAQ,cAEAC,GAEAT,EAHAU,gBAGAV,EAFAS,aACAE,EACAX,EADAW,SAEJ,GAAsDC,EAAAA,EAAAA,WAAkB,GAAxE,eAAOC,EAAP,KAA4BC,EAA5B,KA0BA,OAPAC,EAAAA,EAAAA,YAAU,WAEN,OADAN,GAAY,GACL,eAGR,KAGC,SAAC,IAAD,CACIO,OAAO,aACPd,KAAMA,EACNe,SAAU,WACNR,GAAY,IAJpB,UAMI,UAAC,IAAD,CAAKS,UAAU,6BAAf,WACI,SAAC,SAAD,CACIC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,GACpBE,KAAK,aACLC,QAAM,EACNC,MAAM,GACNC,aAAc,KANlB,UAOI,SAAC,IAAD,OAEJ,SAAC,IAAD,CAAKP,UAAU,iBAAiBE,KAAM,EAAtC,2BAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,UAAC,IAAD,CAAKM,QAAQ,QAAb,WACI,SAAC,SAAD,CAAWJ,KAAK,eAAeE,MAAM,GAAGG,MAAO,CAAEC,MAAO,SAAWH,aAAc,EAAjF,UACI,SAAC,IAAD,CAAQR,SAxCH,SAAAY,GACzBf,EAA6B,IAANe,IAuCqCC,QAASC,EAAAA,OAEpDlB,IACG,iCACI,SAAC,SAAD,CACIS,KAAK,kBACLE,MAAM,GACNC,aAAa,GACbE,MAAO,CAAEC,MAAO,QAASI,WAAY,OAAQC,YAAa,OAJ9D,UAKI,SAAC,IAAD,CAAOC,UAAQ,OASnB,SAAC,IAAD,CAAcC,SAvDvB,SAAAN,GACf,IAAMO,EAAKP,EAAEQ,KAAI,SAAAC,GACb,OAAOA,EAAKF,MAEhBlC,EAAKqC,eAAe,CAAEC,gBAAiBJ,EAAGK,yBAwDlC,SAAC,IAAD,CAAKvB,UAAU,QAAQE,KAAM,EAA7B,uCAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,EAA5B,UACI,SAAC,SAAD,CACID,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,KAAK,YACLE,MAAM,GACNC,aAAc,EALlB,UAMI,SAAC,WAAD,CAAaK,QAASY,EAAAA,UAG9B,SAAC,IAAD,CAAKxB,UAAU,QAAQE,KAAM,EAA7B,oDAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,EAA5B,UACI,SAAC,SAAD,CACID,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,KAAK,WACLE,MAAM,GACNmB,cAAc,UALlB,UAMI,SAAC,IAAD,gCAGR,SAAC,IAAD,CAAKzB,UAAU,QAAQE,KAAM,EAA7B,uCAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,SAAC,SAAD,CAAWD,SAAU,CAAEC,KAAM,GAAKC,WAAY,CAAED,KAAM,IAAME,KAAK,QAAQE,MAAM,GAAGC,aAAc,EAAhG,UACI,SAAC,WAAD,CAAaK,QAASc,EAAAA,UAG9B,SAAC,IAAD,CAAK1B,UAAU,iBAAiBE,KAAM,EAAtC,2BAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,SAAC,SAAD,CACID,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,KAAK,QACLE,MAAM,GACNqB,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6DALvC,UAMI,SAAC,IAAD,SAGR,SAAC,IAAD,CAAK7B,UAAU,iBAAiBE,KAAM,EAAtC,2BAGA,UAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,WACI,SAAC,KAAD,CAAQ4B,MAAO7C,EAAS8C,OAAQ,IAAKhC,SA1HpC,SAAAY,GACT1B,IAAY0B,IACZ3B,EAAKqC,eAAe,CAAEpC,QAAS0B,IAC/BzB,EAAWyB,GACXpB,GAAY,QAuHJ,SAAC,SAAD,CACIU,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,KAAK,UACLE,MAAM,GACNG,MAAO,CAAEuB,UAAW,SACpBL,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6DANvC,UAOI,SAAC,IAAD,CAAOxB,QAAM,EAACI,MAAO,CAAEsB,OAAQ,eAGvC,SAAC,IAAD,CAAK/B,UAAU,QAAQE,KAAM,EAA7B,2BAGA,UAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,WACI,SAAC,IAAD,CAAgB+B,cAAe5C,EAAY6C,iBAAkB5C,KAC7D,SAAC,KAAD,CACIH,YAAaA,EACbC,eAAgBA,EAChB+C,SAAU9C,EAAa,EAAIA,EAAW+C,OAAS,QAGvD,SAAC,IAAD,CAAKpC,UAAU,QAAQE,KAAM,EAA7B,8CAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,EAA5B,SACKT,EAAQ,WACA4C,EAAAA,EAAAA,IAAY5C,EAASW,MADrB,aAC8BiC,EAAAA,EAAAA,IAAYC,GAAAA,GAASC,OAAO,yBAD1D,WAEAF,EAAAA,EAAAA,IAAYrD,EAAKwD,cAAc,iBAF/B,aAEmDH,EAAAA,EAAAA,IAClDrD,EAAKwD,cAAc,mBAGjC,SAAC,IAAD,CAAKxC,UAAU,QAAQE,KAAM,EAA7B,0DAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,EAA5B,oBACQmC,EAAAA,EAAAA,IAAYrD,EAAKwD,cAAc,gBADvC,aAC0DH,EAAAA,EAAAA,IAClDrD,EAAKwD,cAAc,yB,mXC6C3C,EA3Nc,SAAA1D,GACV,IAAQ2D,EAA0E3D,EAA1E2D,UAAWC,EAA+D5D,EAA/D4D,MAAOC,EAAwD7D,EAAxD6D,kBAAmBC,EAAqC9D,EAArC8D,WAAYC,EAAyB/D,EAAzB+D,YAAaC,EAAYhE,EAAZgE,QAC9DrD,GAAasD,EAAAA,EAAAA,KAAbtD,SACR,GAA4BC,EAAAA,EAAAA,YAA5B,eAAOsD,EAAP,KAAeC,EAAf,KACQC,GAAeC,EAAAA,EAAAA,KAAfD,WAEFE,EAAgB,SAAAC,GAoBlBC,EAAAA,EAAAA,IAAU,MAAO,IAnBD,YACZC,EAAAA,EAAAA,IACI,CACId,UAAWe,OAAOH,EAAMZ,WACxBI,YAAaQ,EAAMR,YACnBY,SAAUJ,EAAMI,SAChBb,WAAYS,EAAMT,WAClBD,kBAAAA,IAEJ,SAAAe,IACY,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM7B,QAAQ8B,QAAQ,kBAAS,GAC/BL,EAAAA,EAAAA,KAAW,gDACXR,KAEAQ,EAAAA,EAAAA,KAAW,mEAKG,gBAI5B9D,EAAkB,SAACmB,GACrBuC,GAAWU,EAAAA,EAAAA,IAAgB,CAAEC,IAAKlD,EAAEkD,IAAKC,SAAUnD,EAAEmD,aAkBzD,OAhBAjE,EAAAA,EAAAA,YAAU,WACN,GAAI6C,EAAO,CACP,IAAMqB,EAAgB,GACtBrB,EAAMsB,SAAQ,SAAAC,GACLA,EAAQC,gBAA6C,SAA3BD,EAAQC,gBACnCH,EAAcI,MAAd,kBAAwBF,GAAxB,IAAiCG,SAAU,MAE/CL,EAAcC,SAAQ,SAAAN,GACdF,OAAOE,EAAKD,YAAcD,OAAOS,EAAQC,iBACzCR,EAAKU,SAASD,MAAd,UAAwBF,UAIpChB,EAAUc,MAEf,CAACrB,KAEA,UAAC,IAAD,CACI1C,UAAU,6BACVS,MAAO,CAAE4D,WAAY,oBAAqBC,YAAa,qBAF3D,UAGKtB,GAAUA,EAAOZ,OAAS,IACvB,iCACI,UAAC,IAAD,CAAKpC,UAAU,QAAQE,KAAM,GAA7B,0BACQ8C,EAAOZ,OAAS,EAAhB,UAAuBY,EAAOZ,OAA9B,UAA0C,MAEjDY,GACGA,EAAO7B,KAAI,SAACC,EAAMmD,GACd,OACI,UAAC,IAAD,CAAKvE,UAAU,OAAOE,KAAM,GAAIO,MAAO,CAAE+D,QAAS,OAAlD,WACI,UAAC,IAAD,CACIC,MAAM,SACNjE,QAAQ,gBACRC,MAAO,CAEHiE,UAAW,QAEXF,QAAS,QAPjB,WASI,UAAC,IAAD,CAAKtE,KAAM,GAAX,WACI,UAAC,IAAD,CAAKA,KAAM,GAAIO,MAAO,CAAEkE,aAAc,OAAtC,UACKvD,EAAKwD,aADV,IACyBxD,EAAKyD,MAD9B,KACuCzD,EAAK0D,WAAY,KACpD,SAAC,IAAD,CACIC,OAAQ,CAAE3E,KAAM,iCAAS4E,KAAM,QAC/BvF,SAAUA,EACVgD,UAAWA,EACXG,WAAYxB,EAAKwB,WACjBD,kBAAmBA,EACnBE,YAAaA,EACboC,WAAYzB,OAAOpC,EAAK6D,YAAc,EACtCf,eAAgB9C,EAAKqC,SACrBX,QAASA,IAEZ1B,EAAK8D,gBAAgB9C,OAAS,GAC3BhB,EAAK8D,gBAAgB/D,KAAI,SAAAgE,GACrB,OACI,SAACC,EAAA,EAAD,CACIC,MAAS,OAAFF,QAAE,IAAFA,GAAAA,EAAIrB,SAAJ,OAAeqB,QAAf,IAAeA,OAAf,EAAeA,EAAIrB,SAAW,GAErCwB,QAAS,WACL9F,EAAgB2F,IAEpB1E,MAAO,CAAEM,YAAa,UAJjBwE,EAAAA,EAAAA,oBASzB,SAAC,IAAD,CAAKrF,KAAM,GAAX,SAAgBkB,EAAKoE,mBAEzB,UAAC,IAAD,CAAKtF,KAAM,EAAGO,MAAO,CAAEgF,UAAW,OAAlC,WAOI,SAAC,IAAD,CACIV,OAAQ,CAAE3E,KAAM,eAAM4E,KAAM,IAC5BvF,SAAUA,EACVgD,UAAWA,EACXG,WAAYxB,EAAKwB,WACjBD,kBAAmBA,EACnBE,YAAaA,EACboC,WAAYzB,OAAOpC,EAAK6D,YAAc,EACtCf,eAAgB9C,EAAKqC,SACrBX,QAASA,EACT4C,UAAWtE,KAEf,SAAC,IAAD,CACIkE,QAAS,WACLlC,EAAchC,IAFtB,gCAQPA,EAAKgD,UACFhD,EAAKgD,SAASjD,KAAI,SAAAwE,GACd,OACI,UAAC,IAAD,CACIlB,MAAM,SACNjE,QAAQ,gBAERC,MAAO,CAEHiE,UAAW,QAEXF,QAAS,OACToB,YAAa,QATrB,WAWI,SAAC,IAAD,CAAK1F,KAAM,EAAX,UACI,SAAC2F,EAAA,EAAD,CAAepF,MAAO,CAAEqF,UAAW,mBAEvC,UAAC,IAAD,CAAK5F,KAAM,GAAX,WACI,UAAC,IAAD,CAAKA,KAAM,GAAIO,MAAO,CAAEkE,aAAc,OAAtC,UACKgB,EAAMf,aADX,IAC0Be,EAAMd,MADhC,KACyCc,EAAMb,WAAY,IAWtDa,EAAMT,gBAAgB9C,OAAS,GAC5BuD,EAAMT,gBAAgB/D,KAAI,SAAAgE,GACtB,OACI,SAACC,EAAA,EAAD,CACIC,MAAS,OAAFF,QAAE,IAAFA,GAAAA,EAAIrB,SAAJ,OAAeqB,QAAf,IAAeA,OAAf,EAAeA,EAAIrB,SAAW,GACrCwB,QAAS,WACL9F,EAAgB2F,IAGpB1E,MAAO,CAAEM,YAAa,UADjBwE,EAAAA,EAAAA,oBAMzB,SAAC,IAAD,CAAKrF,KAAM,GAAX,SAAgByF,EAAMH,mBAE1B,UAAC,IAAD,CAAKtF,KAAM,EAAGO,MAAO,CAAEgF,UAAW,OAAlC,WACI,SAAC,IAAD,CACIV,OAAQ,CAAE3E,KAAM,eAAM4E,KAAM,IAC5BvF,SAAUA,EACVgD,UAAWA,EACXG,WAAY+C,EAAM/C,WAClBD,kBAAmBA,EACnBE,YAAaA,EACboC,WAAYzB,OAAOmC,EAAMV,YACzBf,eAAgByB,EAAMlC,SACtBX,QAASA,EACT4C,UAAWC,KAEf,SAAC,IAAD,CACIL,QAAS,WACLlC,EAAcuC,IAFtB,gCArDCJ,EAAAA,EAAAA,mBAzEuCA,EAAAA,EAAAA,oBA6IpF,SAAC,IAAD,CAAKvF,UAAU,QAAQE,KAAM,EAA7B,2BAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,SAAC6F,EAAA,EAAD,CACItG,SAAUA,EACVgD,UAAWA,EACXG,WAAYA,EACZD,kBAAmBA,EACnBE,YAAaA,EACboC,WAAY,EACZnC,QAASA,UC0B7B,EAvOwB,SAAChE,GAA2B,IAAD,EACvC8D,EAAqC9D,EAArC8D,WAAuBoD,GAAclH,EAAzBmH,UAAyBnH,EAAdkH,WACvBvG,GAAasD,EAAAA,EAAAA,KAAbtD,SACR,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOT,EAAP,KAAgBC,EAAhB,KACA,GAAwBQ,EAAAA,EAAAA,YAAxB,eAAOgE,EAAP,KAAawC,EAAb,KACA,GAAoCxG,EAAAA,EAAAA,YAApC,eAAOyG,EAAP,KAAmBC,EAAnB,KACA,GAA8B1G,EAAAA,EAAAA,YAA9B,eACA,GADA,UACe2G,EAAAA,EAAAA,WAARrH,GAAP,eACA,GAAoCU,EAAAA,EAAAA,UAAgB,IAApD,eAAOL,EAAP,KAAmBC,EAAnB,KACA,GAAsCI,EAAAA,EAAAA,UAAiB,IAAvD,eAAOP,EAAP,KAAoBC,EAApB,KACA,GAAoCM,EAAAA,EAAAA,WAAkB,GAAtD,eAAmB4G,GAAnB,WACA,GAAwC5G,EAAAA,EAAAA,YAAxC,eAAO6G,GAAP,KAAqBC,GAArB,KACA,IAAgC9G,EAAAA,EAAAA,WAAkB,GAAlD,iBAAO+G,GAAP,MAAiBlH,GAAjB,MACA,IAAsCG,EAAAA,EAAAA,WAAkB,GAAxD,iBAAOgH,GAAP,MAAoBC,GAApB,MACQzD,IAAeC,EAAAA,EAAAA,KAAfD,WAMF0D,GAAU,WACO,IAAfhE,GACA4D,GAAgB,MAChBtD,IACI2D,EAAAA,EAAAA,IAAUjE,GAAY,SAAAc,GAAS,IAAD,IAC1BwC,EAAQxC,EAAKoD,OAAOpD,MACpBxE,EAAU,UAACwE,EAAKoD,OAAOpD,YAAb,aAAC,EAAkBzE,SAC7BK,EAAcoE,EAAKoD,OAAOC,OAC1B,IAAMC,EAAatD,EAAKoD,OAAOpD,KAC/B1E,EAAKqC,gBAAL,UAAyB2F,IACzBR,GAAe,UAAC9C,EAAKoD,OAAOpD,YAAb,aAAC,EAAkBuC,WAClC1G,IAAY,QAIpBP,EAAKqC,eAAe,CAAEuD,aAAcnF,EAASW,KAAM0E,WAAYxC,GAAAA,GAASC,OAAO,0BAsCjF0E,GAAa,WACXR,IAAYC,GACZpD,EAAAA,EAAAA,IAAU,MAAO,IAAI,WACjB0C,GAAU,MAGdA,GAAU,IAuClB,OArBAnG,EAAAA,EAAAA,YAAU,WAEN,OADA+G,KACO,WACHJ,GAAgB,MAChBjH,IAAY,GACZoH,IAAe,MAEpB,KAEH9G,EAAAA,EAAAA,YAAU,WACF0G,GACArD,IACIgE,EAAAA,EAAAA,IAAgBX,IAAc,SAAA7C,GAC1B0C,EAAc1C,OAItB0C,EAAc,QAEnB,CAACG,MAGA,+BACI,UAAC,IAAD,CACIY,QAAwB,IAAfvE,EACTyC,MAAM,wCACN+B,SAAUH,GACVjH,UAAU,eACVqH,QAAQ,wBACR3G,MAAO,KANX,WAyBI,SAAC4G,EAAA,EAAD,CACItI,KAAMA,EACN0E,KAAMA,EACNzE,QAASA,EACTC,WAAYA,EACZG,WAAYA,EACZC,cAAeA,EACfE,gBAxIQ,SAACmB,GACrBuC,IAAWU,EAAAA,EAAAA,IAAgB,CAAEC,IAAKlD,EAAEkD,IAAKC,SAAUnD,EAAEmD,aAwIzC3E,YAAaA,EACbC,eAAgBA,EAChBG,YAAaA,MAEjB,SAAC,IAAD,CAAKiB,QAAQ,MAAMC,MAAO,CAAEkE,aAAc,QAA1C,UACI,SAAC,IAAD,WACI,UAAC,IAAD,YAwBI,SAAC,IAAD,CAAQvE,KAAK,eAAK4E,KAAK,UAAUM,QAhJxC,WACbtG,EAAKuI,iBAAiBC,MAAK,SAAAC,GACvBnE,EAAAA,EAAAA,IAAU,MAAO,IAAI,WACjB,IAAMoE,GAAM,kBAAQD,GAAR,IAAgBE,SAAUF,EAAOE,SAAW,EAAI,IACtDC,EAAW,IAAIC,SAErBC,OAAOC,KAAKL,GAAQ1D,SAAQ,SAAAgE,QACJC,IAAhBP,EAAOM,IAAsC,OAAhBN,EAAOM,IACpCJ,EAASM,OAAOF,EAAKN,EAAOM,OAGhC3I,EAAW+C,OAAS,GACpB/C,EAAW8B,KAAI,SAAAC,GACX,OAAOwG,EAASM,OAAO,kBAAmB9G,EAAKyC,QAGnD1E,GACAA,EAAY6E,SAAQ,SAAAC,GAChB2D,EAASM,OAAO,QAASjE,MAGjCf,IACIiF,EAAAA,EAAAA,IAAU,CAAEzE,KAAMkE,IAAY,SAAAlE,GAC1BnE,IAAY,GACZ+G,GAAc,GACdM,KACAxH,EAAe,IACfkE,EAAAA,EAAAA,KAAW,0DAqHP,2BAGA,SAAC,IAAD,CAAQlD,KAAK,eAAK4E,KAAK,UAAUM,QAxGpC,SAACmC,GAClBnE,EAAAA,EAAAA,SACqB2E,IAAjB1B,IAA+C,OAAjBA,GAAwB,MAAQ,MAC9D,IACA,YACI6B,EAAAA,EAAAA,IAAUxF,GAAY,SAAAc,GAClBsC,GAAU,SAGlB,gBA+FgB,2BAGEG,IAAc,SAAC,KAAD,CAAQvD,WAAYA,EAAYE,QAAS8D,MACzD,SAAC,IAAD,CAAQxG,KAAK,eAAKkF,QAAS2B,GAA3B,iCAMXvD,IACG,SAAC,EAAD,CACIhB,MAAK,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAM2E,UACb5F,UAAW,EACXE,kBAAmB,EACnBC,WAAYA,EACZC,YAAY,IACZC,QAAS8D,KAIhBT,IACG,SAACmC,EAAA,EAAD,CACIC,UAAQ,EACR7E,KAAMyC,EACNvD,WAAYA,EACZE,QAAS8D,GACTD,eAAgBA,KAGvBR,IAAU,UAAIA,EAAWW,cAAf,aAAI,EAAmBpD,QAC9B,SAAC,EAAD,CACIhB,MAAOyD,EAAWW,OAAOpD,KAAK8E,gBAC9B/F,UAAW,EACXE,kBAAmB,EACnBC,WAAYuD,EAAWW,OAAOpD,KAAKuC,UACnCpD,YAAY,IACZC,QAAS8D,WCvOjC,EAJ6D,SAAC,GAA0C,IAAxChE,EAAuC,EAAvCA,WAAYoD,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACnF,OAAO,SAAC,EAAD,CAAWrD,WAAYA,EAAYoD,UAAWA,EAAWC,UAAWA,K,iECgI/E,EA3HqB,SAAAnH,GACjB,IAAQE,EAASF,EAATE,KACR,GAAsDU,EAAAA,EAAAA,WAAkB,GAAxE,eAAOC,EAAP,KAA4BC,EAA5B,KAgBA,OACI,+BACI,UAAC,IAAD,CAAKI,UAAU,6BAAf,WACI,SAAC,IAAD,CAAKA,UAAU,QAAQE,KAAM,EAA7B,2BAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,UAAC,IAAD,CAAKuE,MAAM,SAASjE,QAAQ,QAA5B,WACI,SAAC,SAAD,CAAWJ,KAAK,iBAAiBG,aAAc,EAAGD,MAAM,GAAGG,MAAO,CAAEC,MAAO,SAA3E,UACI,SAAC,IAAD,CAAQE,QAAS6H,EAAAA,QAErB,SAAC,KAAD,CAAmBzJ,KAAMA,UAGjC,SAAC,IAAD,CAAKgB,UAAU,SAASE,KAAM,EAA9B,2BAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,UAAC,IAAD,CAAKM,QAAQ,QAAb,WACI,SAAC,SAAD,CAAWJ,KAAK,eAAeG,aAAc,EAAGD,MAAM,GAAGG,MAAO,CAAEC,MAAO,SAAzE,UACI,SAAC,IAAD,CAAQX,SA9BH,SAAAY,GACzBf,EAA6B,IAANe,IA6BqCC,QAASC,EAAAA,OAEpDlB,IACG,iCACI,SAAC,SAAD,CACIS,KAAK,kBACLE,MAAM,GACNC,aAAa,GACbE,MAAO,CAAEC,MAAO,QAASI,WAAY,OAAQC,YAAa,OAJ9D,UAKI,SAAC,IAAD,CAAOC,UAAQ,OASnB,SAAC0H,EAAA,EAAD,CAAczH,SA7CvB,SAAAN,GACf,IAAMO,EAAKP,EAAEQ,KAAI,SAAAC,GACb,OAAOA,EAAKF,MAEhBlC,EAAKqC,eAAe,CAAEC,gBAAiBJ,EAAGK,yBA8ClC,SAAC,IAAD,CAAKvB,UAAU,QAAQE,KAAM,EAA7B,uCAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,EAA5B,UACI,SAAC,SAAD,CACID,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,KAAK,YACLG,aAAc,EACdD,MAAM,GALV,UAMI,SAAC,WAAD,CAAaM,QAASY,EAAAA,UAG9B,SAAC,IAAD,CAAKxB,UAAU,QAAQE,KAAM,EAA7B,oDAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,EAA5B,UACI,SAAC,SAAD,CACID,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,KAAK,WACLE,MAAM,GAENC,aAAa,MANjB,UAQI,SAAC,WAAD,CAAaK,QAAS+H,EAAAA,UAG9B,SAAC,IAAD,CAAK3I,UAAU,QAAQE,KAAM,EAA7B,uCAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,SAAC,SAAD,CAAWD,SAAU,CAAEC,KAAM,GAAKC,WAAY,CAAED,KAAM,IAAME,KAAK,QAAQG,aAAc,EAAGD,MAAM,GAAhG,UACI,SAAC,WAAD,CAAaM,QAASc,EAAAA,UAI9B,SAAC,IAAD,CAAK1B,UAAU,SAASE,KAAM,EAA9B,2BAGA,SAAC,IAAD,CAAKF,UAAU,OAAOE,KAAM,GAA5B,UACI,UAAC,IAAD,CAAKM,QAAQ,QAAb,WACI,SAAC,SAAD,CACIJ,KAAK,aACLG,aAAc,EACdD,MAAM,GACNG,MAAO,CAAEC,MAAO,QAASK,YAAa,QAJ1C,UAKI,SAAC,IAAD,CAAQH,QAASgI,EAAAA,QAErB,SAAC,SAAD,CACIxI,KAAK,aACLE,MAAM,GACNC,aAAa,GACbE,MAAO,CAAEC,MAAO,QAASI,WAAY,MAAOC,YAAa,OAJ7D,UAKI,SAAC,IAAD,iB,WCoC5B,EA7JmB,SAAAjC,GACf,IACI4E,EASA5E,EATA4E,KACAmF,EAQA/J,EARA+J,KACAC,EAOAhK,EAPAgK,cACAC,EAMAjK,EANAiK,aACAC,EAKAlK,EALAkK,iBACAC,EAIAnK,EAJAmK,YAEAC,GAEApK,EAHAqK,aAGArK,EAFAoK,YACAE,EACAtK,EADAsK,cAkCEC,EAAc,CAChBC,WAAY,CACR,CACIC,MAAO,SACPC,WAAY,MACZC,SAAU,GACVC,yBAAyB,EACzBC,mBAAmB,GAEvB,CACIJ,MAAO,qBACPC,WAAY,gBAEhB,CACID,MAAO,QACPC,WAAY,eACZC,SAAU,IACVG,UAAW,MACXC,sBA9CU,SAAAnC,GACA,IAAD,YAAjB,OAAIA,EAAOhE,MAEH,iCACI,2BACKgE,EAAO5F,OACR,iBAAMrB,MAAO,CAAEqJ,MAAO,OAAtB,SACKtG,OAAM,UAACkE,EAAOhE,YAAR,aAAC,EAAaqG,iBAAmB,EAAvC,uBAAiDrC,EAAOhE,YAAxD,aAAiD,EAAaqG,gBAA9D,KAAmF,SAG3F,UAAArC,EAAOhE,YAAP,eAAasG,eACV,iBAAKvJ,MAAO,CAAEmF,YAAa,OAAQ5D,UAAW,QAA9C,WACI,gBAAKvB,MAAO,CAAEwJ,QAAS,eAAvB,UACI,SAACpE,EAAA,EAAD,CAAepF,MAAO,CAAEqF,UAAW,kBAF3C,UAIK4B,EAAOhE,YAJZ,aAIK,EAAasG,aACd,iBAAMvJ,MAAO,CAAEqJ,MAAO,OAAtB,SACKtG,OAAM,UAACkE,EAAOhE,YAAR,aAAC,EAAawG,uBAAyB,EAA7C,uBACWxC,EAAOhE,YADlB,aACW,EAAawG,sBADxB,KAEK,YAOvB,qBAsBH,CACIX,MAAO,kBACPC,WAAY,2BACZC,SAAU,IAEd,CACIF,MAAO,iBACPC,WAAY,2BACZC,SAAU,IAEd,CACIF,MAAO,cACPC,WAAY,eACZC,SAAU,IAEd,CACIF,MAAO,eACPC,WAAY,sBAEhB,CACID,MAAO,aACPC,WAAY,4BAEhB,CACID,MAAO,cACPC,WAAY,kCAEhB,CACID,MAAO,aACPC,WAAY,yCAGpBW,aAAc,GACdC,UAAW,GACXC,cAAe,CACXC,KAAM,EACNb,SAAU,IACVc,UAAU,EACVC,WAAW,EACXC,UAAU,GAEdC,2BAA2B,EAC3BC,aAAc,YAElB,OACI,gBAAK3K,UAAU,iBAAf,UACI,iBAAKS,MAAO,CAAEmK,gBAAiB,QAASpG,QAAS,QAAjD,WACI,UAAC,IAAD,CAAsB/D,MAAO,CAAEkE,aAAc,QAA7C,WACI,SAAC,IAAD,CAAKzE,KAAM,MAKX,UAAC,IAAD,CAAKA,KAAM,GAAIO,MAAO,CAAEgF,UAAW,OAAnC,WACI,SAAC,IAAD,CAAQT,KAAK,UAAUM,QAAS2D,EAAhC,2BAGA,SAAC,IAAD,CAAQjE,KAAK,UAAUM,QAAS8D,EAAhC,gCAVE7D,EAAAA,EAAAA,cAmBV,gBACIvF,UAAU,uCAEVS,MAAO,CAAEC,MAAO,OAAQqB,OAAQ,SAHpC,UAII,SAAC,EAAA8I,YAAD,CACIC,QAASpH,EAAKqH,KACd1B,YAAaA,EACb2B,YA7HA,SAAAtD,GAChBwB,EAAWxB,EAAOuD,MA6HFC,sBAAoB,EACpBC,mBAAoBrC,EACpBsC,uBAAqB,OAG7B,gBAAKpL,UAAU,WAAWS,MAAO,CAAEgF,UAAW,SAAUzD,UAAW,QAAnE,UACI,SAAC,KAAD,CACIqJ,MAAO3H,EAAK2H,MACZC,QAASzC,EACT9I,SAAUgJ,EACVwC,iBAAe,EACfC,gBAAiB,GACjBxC,iBAAkBA,YCE1C,EAjJmD,WAC/C,OAAgCtJ,EAAAA,EAAAA,UAAc,IAA9C,eAAO+L,EAAP,KAAiBC,EAAjB,KACA,GAA0BhM,EAAAA,EAAAA,UAAS,GAAnC,eAAO2L,EAAP,KAAcM,EAAd,KACA,GAAoCjM,EAAAA,EAAAA,YAApC,eAAOkM,EAAP,KAAmBC,EAAnB,KACA,EAAexF,EAAAA,EAAAA,UAARrH,GAAP,eACA,GAAwCU,EAAAA,EAAAA,UAAc,IAAtD,eAAOoM,EAAP,KAAqBC,EAArB,KACA,GAA8BrM,EAAAA,EAAAA,UAAS,MAAvC,eAAOsM,EAAP,KAAgB9C,EAAhB,KACM+C,GAAUC,EAAAA,EAAAA,MACRhJ,GAAeC,EAAAA,EAAAA,KAAfD,WAUFiJ,EAAW,WACb,IAAIC,EAAepN,EAAKqN,iBACxBD,EAAaE,UAAYhK,GAAAA,CAAO8J,EAAaE,WAAW/J,OAAO,cAC/D6J,EAAaG,QAAUjK,GAAAA,CAAO8J,EAAaG,SAAShK,OAAO,cAE3D6J,EAAazE,SAAqC,QAA1ByE,EAAazE,cAAqBM,EAAYmE,EAAazE,SACnFoE,GAAgB,kBAAKK,GAAN,IAAoBvD,KAAM,EAAG2D,MAAO,MACnDC,GAAiB,kBAAKL,GAAN,IAAoBvD,KAAM,EAAG2D,MAAO,OAGlDC,EAAmB,SAAApJ,GACrBH,GACIwJ,EAAAA,EAAAA,IAAWrJ,GAAO,SAAAK,GACdgI,EAAW,OAAChI,QAAD,IAACA,OAAD,EAACA,EAAMoD,QAClB6E,EAAQ,OAACjI,QAAD,IAACA,OAAD,EAACA,EAAMoD,OAAOuE,aAOlCxL,EAAAA,EAAAA,YAAU,WAENsM,MACD,IAiDH,OACI,iCACI,qBAASnM,UAAU,eAAnB,WACI,UAAC,IAAD,CAAYA,UAAU,mBAAtB,WACI,SAAC,SAAD,CAAiBA,UAAU,yBAA3B,gEACA,SAAC,SAAD,CAAiBA,UAAU,2BAA3B,6DAEJ,UAAC,IAAD,CAAMhB,KAAMA,EAAMc,OAAO,aAAzB,WACI,UAAC,IAAD,CAAK2E,MAAM,SAA0BhE,MAAO,CAAEkE,aAAc,OAAQ3C,UAAW,SAA/E,WACI,SAAC,IAAD,CAAK9B,KAAM,GAAX,uCACA,UAAC,IAAD,CAAKA,KAAM,GAAIO,MAAO,CAAEgF,UAAW,OAAnC,WACI,SAAC,IAAD,CAAQT,KAAK,UAAU2H,SAAS,SAASrH,QAAS6G,EAAlD,0BADJ,QAKI,SAAC,IAAD,CAAQnH,KAAK,UAAU2H,SAAS,QAAhC,sCAPiBpH,EAAAA,EAAAA,cAYzB,SAAC,EAAD,CAAcvG,KAAMA,QAExB,SAAC,IAAD,CAAKyF,MAAM,SAA0BhE,MAAO,CAAEkE,aAAc,OAAQ3C,UAAW,SAA/E,UACI,UAAC,IAAD,CAAK9B,KAAM,GAAX,yCACW,kBAAMO,MAAO,CAAEqJ,MAAO,OAAtB,eAAiC8C,EAAAA,EAAAA,IAAiBvB,GAAlD,kBAFU9F,EAAAA,EAAAA,aAKxBkG,IACG,SAAC,EAAD,CACI/H,KAAM+H,EACN5C,KAAI,OAAEiD,QAAF,IAAEA,OAAF,EAAEA,EAAcjD,KACpBC,cA9EE,SAAA+D,GAElBhB,EAAcgB,EAAMnJ,OA6EJqF,aAjHC,SAAAF,GACjBkD,GAAgB,kBAAKD,GAAN,IAAoBjD,KAAMA,KACzC4D,GAAiB,kBAAKX,GAAN,IAAoBjD,KAAMA,MAgH1BG,iBA9GK,SAACH,EAAMiE,GAC5BC,QAAQC,IAAInE,EAAM,MAAOiE,IA8GT7D,YAzFA,SAAA5F,GAChB4I,EAAQ9H,KAAK,wBAyFGgF,aAvEC,WACjBjG,GACI+J,EAAAA,EAAAA,IAAqB,CACjBC,IAAK,uSACLC,OAAO,4BAAD,OAAU7K,GAAAA,GAASC,OAAO,kBAA1B,QACNmB,KAAMoI,MAmEE5C,WAAYA,EACZE,cAhEE,WAClB,IAAMgE,EAAQpB,EAAQqB,mBAClBpH,EAAY,GACVqH,EAAOF,EAAMjM,KAAI,SAAAC,GAInB,OAH4B,OAAxBA,EAAKsC,KAAKuC,WACVA,EAAU9B,KAAK,CAAEvB,WAAYxB,EAAKsC,KAAKd,WAAYqD,UAAW7E,EAAKsC,KAAKuC,YAErE7E,EAAKsC,KAAKd,cAErB,GAAoB,IAAhB0K,EAAKlL,OACL,OAAOkB,EAAAA,EAAAA,IAAU,OAErBA,EAAAA,EAAAA,IAAU2C,EAAU7D,OAAS,EAAI,MAAQ,MAAO,IAAI,WAEhD6D,EAAU7D,OAAS,GACf6D,EAAU9E,KAAI,SAAAC,GACV,OAAOmM,EAAAA,EAAAA,IAAmB,CAAE3K,WAAYxB,EAAKwB,WAAYqD,UAAW7E,EAAK6E,YAAa,kBAI9F/C,GACIsK,EAAAA,EAAAA,IAAc,CAAElM,gBAAiBgM,EAAK/L,aAAc,WAChD4K,kBA8CR,yBACKP,IACG,SAAC,EAAD,CACIhJ,WAAYgJ,EAAWhJ,WACvBoD,UAxFF,SAAAS,GAEdoF,OAAc5D,GACVxB,GACAgG,EAAiBX,IAqFL7F,UAAW2F,EAAW3F,kBC7I9C,EAR4C,WAKxC,OAAO,SAAC,EAAD","sources":["pages/Partner/notice/comp/NoticeForm.tsx","pages/Partner/notice/comp/Reply.tsx","pages/Partner/notice/detail/DetailContainer.tsx","pages/Partner/notice/detail/index.tsx","pages/Partner/notice/comp/NoticeFilter.tsx","pages/Partner/notice/comp/NoticeList.tsx","pages/Partner/notice/list/NoticeList.tsx","pages/Partner/notice/list/index.tsx"],"sourcesContent":["/* eslint-disable */\nimport { DownloadOutlined } from '@ant-design/icons';\nimport { Row, Col, Select, Input, Button, Checkbox, Form, Radio } from 'antd';\nimport { CustomUpload, Editor } from 'components';\nimport CustomDownload from 'components/customDownload';\nimport { emptyString } from 'helper/recycle';\nimport { uniqueId } from 'lodash';\nimport moment from 'moment';\nimport ManagerPopup from 'Popups/Manager';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { confirmOptions, targetsOptions, topFixOptions, useOptions } from 'types/Common/NoticesOptions';\n\nconst NoticeForm = props => {\n    const {\n        mode,\n        form,\n        content,\n        setContent,\n        uploadFiles,\n        setUploadFiles,\n        boadrFiles,\n        setBoadrFiles,\n        onClickDownLoad,\n        setIsChaged,\n        userInfo\n    } = props;\n    const [visibleTargetSearch, setVisibleTargetSearch] = useState<boolean>(false);\n    const onchange = e => {\n        if (content !== e) {\n            form.setFieldsValue({ content: e });\n            setContent(e);\n            setIsChaged(true);\n        }\n    };\n\n    const onChangeNoticeTarget = e => {\n        setVisibleTargetSearch(e === 3);\n    };\n    const setManager = e => {\n        const id = e.map(item => {\n            return item.id;\n        });\n        form.setFieldsValue({ noticeTargetIds: id.toString() });\n    };\n\n    useEffect(() => {\n        setIsChaged(false);\n        return () => {\n            //\n        };\n    }, []);\n\n    return (\n        <Form\n            layout=\"horizontal\"\n            form={form}\n            onChange={() => {\n                setIsChaged(true);\n            }}>\n            <Row className=\"content__contentbox__table\">\n                <Form.Item\n                    labelCol={{ span: 0 }}\n                    wrapperCol={{ span: 0 }}\n                    name=\"articleIdx\"\n                    hidden\n                    label=\"\"\n                    initialValue={null}>\n                    <Input />\n                </Form.Item>\n                <Col className=\"label required\" span={4}>\n                    대상\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item name=\"noticeTarget\" label=\"\" style={{ width: '200px' }} initialValue={0}>\n                            <Select onChange={onChangeNoticeTarget} options={targetsOptions} />\n                        </Form.Item>\n                        {visibleTargetSearch && (\n                            <>\n                                <Form.Item\n                                    name=\"noticeTargetIds\"\n                                    label=\"\"\n                                    initialValue=\"\"\n                                    style={{ width: '200px', marginLeft: '10px', marginRight: '0px' }}>\n                                    <Input readOnly />\n                                </Form.Item>\n                                {/* <Form.Item\n                                    name=\"noticeTargetNames\"\n                                    label=\"\"\n                                    initialValue=\"\"\n                                    style={{ width: '200px', marginLeft: '10px', marginRight: '0px' }}>\n                                    <Input />\n                                </Form.Item> */}\n                                <ManagerPopup setValue={setManager} />\n                            </>\n                        )}\n                    </Row>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    확인여부\n                </Col>\n                <Col className=\"data\" span={8}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"isConfirm\"\n                        label=\"\"\n                        initialValue={0}>\n                        <Radio.Group options={confirmOptions} />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    상단고정 여부\n                </Col>\n                <Col className=\"data\" span={8}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 10 }}\n                        name=\"isTopFix\"\n                        label=\"\"\n                        valuePropName=\"checked\">\n                        <Checkbox>고정</Checkbox>\n                    </Form.Item>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    노출여부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item labelCol={{ span: 0 }} wrapperCol={{ span: 10 }} name=\"isUse\" label=\"\" initialValue={1}>\n                        <Radio.Group options={useOptions} />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label required\" span={4}>\n                    제목\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"title\"\n                        label=\"\"\n                        rules={[{ required: true, message: '제목을 입력해주세요.' }]}>\n                        <Input />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label required\" span={4}>\n                    내용\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Editor value={content} height={350} onChange={onchange} />\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"content\"\n                        label=\"\"\n                        style={{ marginTop: '-32px' }}\n                        rules={[{ required: true, message: '내용을 입력해주세요.' }]}>\n                        <Input hidden style={{ height: '0px' }} />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    첨부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <CustomDownload downloadFiles={boadrFiles} setDownloadFiles={setBoadrFiles} />\n                    <CustomUpload\n                        uploadFiles={uploadFiles}\n                        setUploadFiles={setUploadFiles}\n                        maxCount={boadrFiles ? 3 - boadrFiles.length : 3}\n                    />\n                </Col>\n                <Col className=\"label\" span={4}>\n                    등록자/일시\n                </Col>\n                <Col className=\"data\" span={8}>\n                    {userInfo\n                        ? `${emptyString(userInfo.name)} ${emptyString(moment().format('YYYY-MM-DD HH:mm:ss'))}`\n                        : `${emptyString(form.getFieldValue('registerName'))} ${emptyString(\n                              form.getFieldValue('registDate')\n                          )}`}\n                </Col>\n                <Col className=\"label\" span={4}>\n                    최종수정자/일시\n                </Col>\n                <Col className=\"data\" span={8}>\n                    {`${emptyString(form.getFieldValue('updaterName'))} ${emptyString(\n                        form.getFieldValue('updateDate')\n                    )}`}\n                </Col>\n            </Row>\n        </Form>\n    );\n};\nexport default NoticeForm;\n","import { EnterOutlined, FileOutlined } from '@ant-design/icons';\nimport { Row, Col, Button } from 'antd';\nimport { deleteReply } from 'api/partner/noticesApi';\nimport modal from 'helper/customModal';\nimport { apiFileDownload } from 'api/common/commonApi';\nimport useUser from 'hooks/user';\nimport { uniqueId } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport useLoding from 'hooks/useLoding';\nimport ReplyPopup from 'Popups/Reply';\nimport NewReply from './NewReply';\n\nconst Reply = props => {\n    const { boardType, reply, articleAttachType, articleIdx, articleType, refresh } = props;\n    const { userInfo } = useUser();\n    const [replys, setReplys] = useState<any>();\n    const { setLoading } = useLoding();\n\n    const onDeleteReply = param => {\n        const callApi = () => {\n            deleteReply(\n                {\n                    boardType: Number(param.boardType),\n                    articleType: param.articleType,\n                    replyIdx: param.replyIdx,\n                    articleIdx: param.articleIdx,\n                    articleAttachType\n                },\n                data => {\n                    if (data?.message.indexOf('성공') > -1) {\n                        modal.info('저장 되었습니다.');\n                        refresh();\n                    } else {\n                        modal.warn('저장에 실패 했습니다.');\n                    }\n                }\n            );\n        };\n        modal.msg('102', '', callApi, () => {\n            //\n        });\n    };\n    const onClickDownLoad = (e: any) => {\n        setLoading(apiFileDownload({ idx: e.idx, fileName: e.fileName }));\n    };\n    useEffect(() => {\n        if (reply) {\n            const madeReplyData = [];\n            reply.forEach(element => {\n                if (!element.parentReplyIdx || element.parentReplyIdx === 'null') {\n                    madeReplyData.push({ ...element, children: [] });\n                }\n                madeReplyData.forEach(data => {\n                    if (Number(data.replyIdx) === Number(element.parentReplyIdx)) {\n                        data.children.push({ ...element });\n                    }\n                });\n            });\n            setReplys(madeReplyData);\n        }\n    }, [reply]);\n    return (\n        <Row\n            className=\"content__contentbox__table\"\n            style={{ borderLeft: '1px solid #E0E0E0', borderRight: '1px solid #E0E0E0' }}>\n            {replys && replys.length > 0 && (\n                <>\n                    <Col className=\"label\" span={24}>\n                        댓글 {replys.length > 0 ? `${replys.length}개` : ''}\n                    </Col>\n                    {replys &&\n                        replys.map((item, index) => {\n                            return (\n                                <Col className=\"data\" span={24} style={{ padding: '0px' }} key={uniqueId()}>\n                                    <Row\n                                        align=\"middle\"\n                                        justify=\"space-between\"\n                                        style={{\n                                            // borderTop: `${index === 0 ? 0 : 1}px solid #E0E0E0`,\n                                            minHeight: '100px',\n                                            // marginBottom: '5px'\n                                            padding: '10px'\n                                        }}>\n                                        <Col span={20}>\n                                            <Col span={24} style={{ marginBottom: '5px' }}>\n                                                {item.registerName}({item.regId}) {item.registDate}{' '}\n                                                <ReplyPopup\n                                                    button={{ name: '대댓글쓰기', type: 'text' }}\n                                                    userInfo={userInfo}\n                                                    boardType={boardType}\n                                                    articleIdx={item.articleIdx}\n                                                    articleAttachType={articleAttachType}\n                                                    articleType={articleType}\n                                                    replyLevel={Number(item.replyLevel) + 1}\n                                                    parentReplyIdx={item.replyIdx}\n                                                    refresh={refresh}\n                                                />\n                                                {item.replyAttachList.length > 0 &&\n                                                    item.replyAttachList.map(el => {\n                                                        return (\n                                                            <FileOutlined\n                                                                title={el?.fileName ? el?.fileName : ''}\n                                                                key={uniqueId()}\n                                                                onClick={() => {\n                                                                    onClickDownLoad(el);\n                                                                }}\n                                                                style={{ marginRight: '10px' }}\n                                                            />\n                                                        );\n                                                    })}\n                                            </Col>\n                                            <Col span={24}>{item.replyContent}</Col>\n                                        </Col>\n                                        <Col span={4} style={{ textAlign: 'end' }}>\n                                            {/* <Button\n                                                onClick={() => {\n                                                    // onDeleteReply(item);\n                                                }}>\n                                                수정\n                                            </Button> */}\n                                            <ReplyPopup\n                                                button={{ name: '수정', type: '' }}\n                                                userInfo={userInfo}\n                                                boardType={boardType}\n                                                articleIdx={item.articleIdx}\n                                                articleAttachType={articleAttachType}\n                                                articleType={articleType}\n                                                replyLevel={Number(item.replyLevel) + 1}\n                                                parentReplyIdx={item.replyIdx}\n                                                refresh={refresh}\n                                                replyItem={item}\n                                            />\n                                            <Button\n                                                onClick={() => {\n                                                    onDeleteReply(item);\n                                                }}>\n                                                삭제\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                    {item.children &&\n                                        item.children.map(cItem => {\n                                            return (\n                                                <Row\n                                                    align=\"middle\"\n                                                    justify=\"space-between\"\n                                                    key={uniqueId()}\n                                                    style={{\n                                                        // borderTop: `${index === 0 ? 0 : 1}px solid #E0E0E0`,\n                                                        minHeight: '100px',\n                                                        // marginBottom: '5px'\n                                                        padding: '10px',\n                                                        paddingLeft: '20px'\n                                                    }}>\n                                                    <Col span={1}>\n                                                        <EnterOutlined style={{ transform: 'scaleX(-1)' }} />\n                                                    </Col>\n                                                    <Col span={19}>\n                                                        <Col span={24} style={{ marginBottom: '5px' }}>\n                                                            {cItem.registerName}({cItem.regId}) {cItem.registDate}{' '}\n                                                            {/* <ReplyPopup\n                                                                button={{ name: '대댓글쓰기', type: 'text' }}\n                                                                userInfo={userInfo}\n                                                                boardType={boardType}\n                                                                articleIdx={cItem.articleIdx}\n                                                                articleAttachType={articleAttachType}\n                                                                articleType=\"Q\"\n                                                                replyLevel={Number(cItem.replyLevel) + 1}\n                                                                parentReplyIdx={cItem.replyIdx}\n                                                            /> */}\n                                                            {cItem.replyAttachList.length > 0 &&\n                                                                cItem.replyAttachList.map(el => {\n                                                                    return (\n                                                                        <FileOutlined\n                                                                            title={el?.fileName ? el?.fileName : ''}\n                                                                            onClick={() => {\n                                                                                onClickDownLoad(el);\n                                                                            }}\n                                                                            key={uniqueId()}\n                                                                            style={{ marginRight: '10px' }}\n                                                                        />\n                                                                    );\n                                                                })}\n                                                        </Col>\n                                                        <Col span={24}>{cItem.replyContent}</Col>\n                                                    </Col>\n                                                    <Col span={4} style={{ textAlign: 'end' }}>\n                                                        <ReplyPopup\n                                                            button={{ name: '수정', type: '' }}\n                                                            userInfo={userInfo}\n                                                            boardType={boardType}\n                                                            articleIdx={cItem.articleIdx}\n                                                            articleAttachType={articleAttachType}\n                                                            articleType={articleType}\n                                                            replyLevel={Number(cItem.replyLevel)}\n                                                            parentReplyIdx={cItem.replyIdx}\n                                                            refresh={refresh}\n                                                            replyItem={cItem}\n                                                        />\n                                                        <Button\n                                                            onClick={() => {\n                                                                onDeleteReply(cItem);\n                                                            }}>\n                                                            삭제\n                                                        </Button>\n                                                    </Col>\n                                                </Row>\n                                            );\n                                        })}\n                                </Col>\n                            );\n                        })}\n                </>\n            )}\n            <Col className=\"label\" span={4}>\n                댓글\n            </Col>\n            <Col className=\"data\" span={20}>\n                <NewReply\n                    userInfo={userInfo}\n                    boardType={boardType}\n                    articleIdx={articleIdx}\n                    articleAttachType={articleAttachType}\n                    articleType={articleType}\n                    replyLevel={0}\n                    refresh={refresh}\n                />\n            </Col>\n        </Row>\n    );\n};\nexport default Reply;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Button, Form, Space, Modal } from 'antd';\nimport { deleteNotice as apiDelete, getNotice, getNoticeAnswer, postNotices, putNotice } from 'api/partner/noticesApi';\nimport modal from 'helper/customModal';\nimport moment from 'moment';\nimport useUser from 'hooks/user';\nimport { apiFileDownload } from 'api/common/commonApi';\nimport { Answer } from 'Popups';\nimport AnswerForm from 'Popups/Answer/AnswerForm';\nimport useLoding from 'hooks/useLoding';\nimport NoticeForm from '../comp/NoticeForm';\nimport NoticeDetail from '../comp/NoticeDetail';\nimport Reply from '../comp/Reply';\n\ntype propsType = {\n    articleIdx: number;\n    answerIdx: number;\n    hideModal: (e) => void;\n};\n\nconst DetailContainer = (props: propsType): any => {\n    const { articleIdx, answerIdx, hideModal } = props;\n    const { userInfo } = useUser();\n    const [content, setContent] = useState<any>();\n    const [data, setData] = useState<any>();\n    const [answerData, setAnswerData] = useState<any>();\n    const [visible, setVisible] = useState<any>();\n    const [form] = Form.useForm();\n    const [boadrFiles, setBoadrFiles] = useState<any[]>([]);\n    const [uploadFiles, setUploadFiles] = useState<File[]>([]);\n    const [modifyMode, setModifyMode] = useState<boolean>(false);\n    const [newAnswerIdx, setNewAnswerIdx] = useState<number>();\n    const [isChaged, setIsChaged] = useState<boolean>(false);\n    const [isAnsChaged, setIsAnsChaged] = useState<boolean>(false);\n    const { setLoading } = useLoding();\n\n    const onClickDownLoad = (e: any) => {\n        setLoading(apiFileDownload({ idx: e.idx, fileName: e.fileName }));\n    };\n\n    const apiCall = () => {\n        if (articleIdx !== 0) {\n            setNewAnswerIdx(null);\n            setLoading(\n                getNotice(articleIdx, data => {\n                    setData(data.result.data);\n                    setContent(data.result.data?.content);\n                    setBoadrFiles(data.result.files);\n                    const noticeData = data.result.data;\n                    form.setFieldsValue({ ...noticeData });\n                    setNewAnswerIdx(data.result.data?.answerIdx);\n                    setIsChaged(false);\n                })\n            );\n        } else {\n            form.setFieldsValue({ registerName: userInfo.name, registDate: moment().format('YYYY-MM-DD HH:mm:ss') });\n        }\n    };\n\n    const onFinish = () => {\n        form.validateFields().then(values => {\n            modal.msg('101', '', () => {\n                const params = { ...values, isTopFix: values.isTopFix ? 1 : 0 };\n                const formData = new FormData();\n\n                Object.keys(params).forEach(key => {\n                    if (params[key] !== undefined && params[key] !== null) {\n                        formData.append(key, params[key]);\n                    }\n                });\n                if (boadrFiles.length > 0) {\n                    boadrFiles.map(item => {\n                        return formData.append('includeFileIdxs', item.idx);\n                    });\n                }\n                if (uploadFiles) {\n                    uploadFiles.forEach(element => {\n                        formData.append('files', element);\n                    });\n                }\n                setLoading(\n                    putNotice({ data: formData }, data => {\n                        setIsChaged(false);\n                        setModifyMode(false);\n                        apiCall();\n                        setUploadFiles([]);\n                        modal.info('저장되었습니다.');\n                    })\n                );\n            });\n        });\n    };\n\n    const closeModal = () => {\n        if (isChaged || isAnsChaged) {\n            modal.msg('104', '', () => {\n                hideModal(false);\n            });\n        } else {\n            hideModal(false);\n        }\n    };\n    const deleteNotice = (values: any) => {\n        modal.msg(\n            newAnswerIdx !== undefined && newAnswerIdx !== null ? '105' : '102',\n            '',\n            () => {\n                apiDelete(articleIdx, data => {\n                    hideModal(true);\n                });\n            },\n            () => {\n                //\n            }\n        );\n    };\n\n    useEffect(() => {\n        apiCall();\n        return () => {\n            setNewAnswerIdx(null);\n            setIsChaged(false);\n            setIsAnsChaged(false);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (newAnswerIdx) {\n            setLoading(\n                getNoticeAnswer(newAnswerIdx, data => {\n                    setAnswerData(data);\n                })\n            );\n        } else {\n            setAnswerData(null);\n        }\n    }, [newAnswerIdx]);\n\n    return (\n        <>\n            <Modal\n                visible={articleIdx !== 0}\n                title=\"공지사항 상세\"\n                onCancel={closeModal}\n                className=\"detail_modal\"\n                footer={<></>}\n                width={1400}>\n                {/* {modifyMode ? ( \n                <NoticeForm\n                    form={form}\n                    data={data}\n                    content={content}\n                    setContent={setContent}\n                    boadrFiles={boadrFiles}\n                    onClickDownLoad={onClickDownLoad}\n                    uploadFiles={uploadFiles}\n                    setUploadFiles={setUploadFiles}\n                    setIsChaged={setIsChaged}\n                />\n                \n                ) : (\n                    <>\n                        {data && <NoticeDetail onClickDownLoad={onClickDownLoad} data={data} boadrFiles={boadrFiles} />}\n                    </>\n                )} */}\n                <NoticeForm\n                    form={form}\n                    data={data}\n                    content={content}\n                    setContent={setContent}\n                    boadrFiles={boadrFiles}\n                    setBoadrFiles={setBoadrFiles}\n                    onClickDownLoad={onClickDownLoad}\n                    uploadFiles={uploadFiles}\n                    setUploadFiles={setUploadFiles}\n                    setIsChaged={setIsChaged}\n                />\n                <Row justify=\"end\" style={{ marginBottom: '10px' }}>\n                    <Col>\n                        <Space>\n                            {/* {modifyMode ? (\n                                <>\n                                    <Button name=\"저장\" type=\"primary\" onClick={onFinish}>\n                                        저장\n                                    </Button>\n                                    <Button\n                                        name=\"취소\"\n                                        onClick={() => {\n                                            setModifyMode(!modifyMode);\n                                        }}>\n                                        취소\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    name=\"수정\"\n                                    type=\"primary\"\n                                    onClick={() => {\n                                        setModifyMode(!modifyMode);\n                                    }}>\n                                    수정\n                                </Button>\n                            )} */}\n                            <Button name=\"수정\" type=\"primary\" onClick={onFinish}>\n                                수정\n                            </Button>\n                            <Button name=\"삭제\" type=\"primary\" onClick={deleteNotice}>\n                                삭제\n                            </Button>\n                            {!answerData && <Answer articleIdx={articleIdx} refresh={apiCall} />}\n                            <Button name=\"닫기\" onClick={closeModal}>\n                                닫기\n                            </Button>\n                        </Space>\n                    </Col>\n                </Row>\n                {data && (\n                    <Reply\n                        reply={data?.replyList}\n                        boardType={0}\n                        articleAttachType={5}\n                        articleIdx={articleIdx}\n                        articleType=\"Q\"\n                        refresh={apiCall}\n                    />\n                )}\n                {/* 답글있을시 처리 */}\n                {answerData && (\n                    <AnswerForm\n                        viewMode\n                        data={answerData}\n                        articleIdx={articleIdx}\n                        refresh={apiCall}\n                        setIsAnsChaged={setIsAnsChaged}\n                    />\n                )}\n                {answerData && answerData.result?.data && (\n                    <Reply\n                        reply={answerData.result.data.answerReplyList}\n                        boardType={0}\n                        articleAttachType={6}\n                        articleIdx={answerData.result.data.answerIdx}\n                        articleType=\"A\"\n                        refresh={apiCall}\n                    />\n                )}\n            </Modal>\n        </>\n    );\n};\n\nexport default DetailContainer;\n","import React from 'react';\nimport Container from './DetailContainer';\n\ninterface INotiesPopup {\n    articleIdx: number;\n    answerIdx: number;\n    hideModal: (e) => void;\n}\nconst NotidceDetail: React.FunctionComponent<INotiesPopup> = ({ articleIdx, hideModal, answerIdx }) => {\n    return <Container articleIdx={articleIdx} hideModal={hideModal} answerIdx={answerIdx} />;\n};\n\nexport default NotidceDetail;\n","import { Row, Col, Select, DatePicker, Input, Button, Checkbox, Breadcrumb, Form, Radio } from 'antd';\nimport { FilterRangePicker } from 'components';\nimport moment from 'moment';\nimport React, { useState } from 'react';\nimport {\n    confirmOptions,\n    dateTypeOptions,\n    searchOptions,\n    targetsOptions,\n    topFixOptions,\n    useOptions\n} from 'types/Common/NoticesOptions';\nimport ManagerPopup from 'Popups/Manager';\n\nconst NoticeFilter = props => {\n    const { form } = props;\n    const [visibleTargetSearch, setVisibleTargetSearch] = useState<boolean>(false);\n    const onChangeDateRange = e => {\n        if (e !== 999) {\n            form.setFieldsValue({ startDate: moment().add('day', -e), endDate: moment() });\n        }\n    };\n    const onChangeNoticeTarget = e => {\n        setVisibleTargetSearch(e === 3);\n    };\n    const setManager = e => {\n        const id = e.map(item => {\n            return item.id;\n        });\n        form.setFieldsValue({ noticeTargetIds: id.toString() });\n    };\n\n    return (\n        <>\n            <Row className=\"content__contentbox__table\">\n                <Col className=\"label\" span={4}>\n                    기간\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row align=\"middle\" justify=\"start\">\n                        <Form.Item name=\"searchDateType\" initialValue={0} label=\"\" style={{ width: '200px' }}>\n                            <Select options={dateTypeOptions} />\n                        </Form.Item>\n                        <FilterRangePicker form={form} />\n                    </Row>\n                </Col>\n                <Col className=\"label \" span={4}>\n                    대상\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item name=\"noticeTarget\" initialValue={0} label=\"\" style={{ width: '200px' }}>\n                            <Select onChange={onChangeNoticeTarget} options={targetsOptions} />\n                        </Form.Item>\n                        {visibleTargetSearch && (\n                            <>\n                                <Form.Item\n                                    name=\"noticeTargetIds\"\n                                    label=\"\"\n                                    initialValue=\"\"\n                                    style={{ width: '200px', marginLeft: '10px', marginRight: '0px' }}>\n                                    <Input readOnly />\n                                </Form.Item>\n                                {/* <Form.Item\n                                    name=\"noticeTargetNames\"\n                                    label=\"\"\n                                    initialValue=\"\"\n                                    style={{ width: '200px', marginLeft: '10px', marginRight: '0px' }}>\n                                    <Input />\n                                </Form.Item> */}\n                                <ManagerPopup setValue={setManager} />\n                            </>\n                        )}\n                    </Row>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    확인여부\n                </Col>\n                <Col className=\"data\" span={8}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"isConfirm\"\n                        initialValue={0}\n                        label=\"\">\n                        <Radio.Group options={confirmOptions} />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    상단고정 여부\n                </Col>\n                <Col className=\"data\" span={8}>\n                    <Form.Item\n                        labelCol={{ span: 0 }}\n                        wrapperCol={{ span: 24 }}\n                        name=\"isTopFix\"\n                        label=\"\"\n                        // valuePropName=\"checked\"\n                        initialValue=\"all\">\n                        {/* <Checkbox>고정</Checkbox> */}\n                        <Radio.Group options={topFixOptions} />\n                    </Form.Item>\n                </Col>\n                <Col className=\"label\" span={4}>\n                    노출여부\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Form.Item labelCol={{ span: 0 }} wrapperCol={{ span: 24 }} name=\"isUse\" initialValue={1} label=\"\">\n                        <Radio.Group options={useOptions} />\n                    </Form.Item>\n                </Col>\n\n                <Col className=\"label \" span={4}>\n                    검색\n                </Col>\n                <Col className=\"data\" span={20}>\n                    <Row justify=\"start\">\n                        <Form.Item\n                            name=\"searchType\"\n                            initialValue={0}\n                            label=\"\"\n                            style={{ width: '200px', marginRight: '10px' }}>\n                            <Select options={searchOptions} />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"searchWord\"\n                            label=\"\"\n                            initialValue=\"\"\n                            style={{ width: '200px', marginLeft: '0px', marginRight: '0px' }}>\n                            <Input />\n                        </Form.Item>\n                    </Row>\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default NoticeFilter;\n","/* eslint-disable */\nimport { Row, Col, Button } from 'antd';\nimport { uniqueId } from 'lodash';\nimport { Pagenation } from 'components';\nimport React from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { EnterOutlined } from '@ant-design/icons';\n\nconst NoticeList = props => {\n    const {\n        data,\n        page,\n        onRowSelected,\n        onChangePage,\n        onShowSizeChange,\n        moveAddPage,\n        fileDownload,\n        setGridApi,\n        onClickDelete\n    } = props;\n    const onGridReady = params => {\n        setGridApi(params.api);\n        // setGridColumnApi(params.columnApi);\n    };\n    const getStsContent = params => {\n        if (params.data) {\n            return (\n                <>\n                    <div>\n                        {params.value}\n                        <span style={{ color: 'red' }}>\n                            {Number(params.data?.articleReplyCnt) > 0 ? `  [${params.data?.articleReplyCnt}]` : ''}\n                        </span>\n                    </div>\n                    {params.data?.answerTitle && (\n                        <div style={{ paddingLeft: '10px', marginTop: '-5px' }}>\n                            <div style={{ display: 'inline-flex' }}>\n                                <EnterOutlined style={{ transform: 'scaleX(-1)' }} />\n                            </div>\n                            {params.data?.answerTitle}\n                            <span style={{ color: 'red' }}>\n                                {Number(params.data?.articleAnswerReplyCnt) > 0\n                                    ? `  [${params.data?.articleAnswerReplyCnt}]`\n                                    : ''}\n                            </span>\n                        </div>\n                    )}\n                </>\n            );\n        }\n        return <div />;\n    };\n    const gridOptions = {\n        columnDefs: [\n            {\n                field: 'number',\n                headerName: 'No.',\n                minWidth: 30,\n                headerCheckboxSelection: true,\n                checkboxSelection: true\n            },\n            {\n                field: 'noticeTargetFormat',\n                headerName: '대상'\n            },\n            {\n                field: 'title',\n                headerName: '제목',\n                minWidth: 300,\n                cellClass: 'tal',\n                cellRendererFramework: getStsContent\n            },\n            {\n                field: 'isConfirmFormat',\n                headerName: '확인여부',\n                minWidth: 30\n            },\n            {\n                field: 'isTopFixFormat',\n                headerName: '상단고정',\n                minWidth: 30\n            },\n            {\n                field: 'isUseFormat',\n                headerName: '노출',\n                minWidth: 60\n            },\n            {\n                field: 'registerName',\n                headerName: '등록자'\n            },\n            {\n                field: 'registDate',\n                headerName: '등록일시'\n            },\n            {\n                field: 'updaterName',\n                headerName: '최종수정자'\n            },\n            {\n                field: 'updateDate',\n                headerName: '최종수정일시'\n            }\n        ],\n        headerHeight: 35,\n        rowHeight: 41,\n        defaultColDef: {\n            flex: 1,\n            minWidth: 120,\n            editable: false,\n            resizable: true,\n            sortable: true\n        },\n        suppressRowClickSelection: true,\n        rowSelection: 'multiple'\n    };\n    return (\n        <div className=\"ag-grid-custom\">\n            <div style={{ backgroundColor: 'white', padding: '20px' }}>\n                <Row key={uniqueId()} style={{ marginBottom: '10px' }}>\n                    <Col span={12}>\n                        {/* <Button type=\"primary\" onClick={moveAddPage}>\n                            신규등록\n                        </Button> */}\n                    </Col>\n                    <Col span={12} style={{ textAlign: 'end' }}>\n                        <Button type=\"primary\" onClick={moveAddPage}>\n                            등록\n                        </Button>\n                        <Button type=\"primary\" onClick={onClickDelete}>\n                            삭제\n                        </Button>\n                        {/* &nbsp;\n                        <Button type=\"primary\" onClick={fileDownload}>\n                            엑셀다운로드\n                        </Button> */}\n                    </Col>\n                </Row>\n                <div\n                    className=\"ag-grid-custom__grid ag-theme-balham\"\n                    // style={{ width: '100%', height: '48.362vh' }}>\n                    style={{ width: '100%', height: '450px' }}>\n                    <AgGridReact\n                        rowData={data.list}\n                        gridOptions={gridOptions}\n                        onGridReady={onGridReady}\n                        enableRangeSelection\n                        onRowDoubleClicked={onRowSelected}\n                        enableBrowserTooltips\n                    />\n                </div>\n                <div className=\"page-box\" style={{ textAlign: 'center', marginTop: '10px' }}>\n                    <Pagenation\n                        total={data.total}\n                        current={page}\n                        onChange={onChangePage}\n                        showSizeChanger\n                        defaultPageSize={10}\n                        onShowSizeChange={onShowSizeChange}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default NoticeList;\n","/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Row, Col, Select, DatePicker, Input, Button, Checkbox, Breadcrumb, Form, Radio, Modal } from 'antd';\nimport { uniqueId } from 'lodash';\nimport { apiExcelFileDownload, deleteNoticeAnswer, deleteNotices, getNotices } from 'api/partner/noticesApi';\nimport { numberWithCommas } from 'helper/recycle';\nimport { useHistory } from 'react-router-dom';\nimport DetailContainer from '../detail';\nimport NoticeFilter from '../comp/NoticeFilter';\nimport NoticeList from '../comp/NoticeList';\nimport { apiFileDownload } from 'api/common/commonApi';\nimport modal from 'helper/customModal';\nimport useLoding from 'hooks/useLoding';\n\nconst NoticeListContent: React.FunctionComponent = () => {\n    const [rowDatas, setRowDatas] = useState<any>({});\n    const [total, setTotal] = useState(0);\n    const [selectItem, setSelectItem] = useState<any>();\n    const [form] = Form.useForm();\n    const [searchParams, setSearchParams] = useState<any>({});\n    const [gridApi, setGridApi] = useState(null);\n    const history = useHistory();\n    const { setLoading } = useLoding();\n\n    const onChangePage = page => {\n        setSearchParams({ ...searchParams, page: page });\n        handleSearchData({ ...searchParams, page: page });\n    };\n    const onShowSizeChange = (page, size) => {\n        console.log(page, ' : ', size);\n        // setSearchParams({ ...searchParams, page: page });\n    };\n    const onSearch = () => {\n        let searchValues = form.getFieldsValue();\n        searchValues.startDate = moment(searchValues.startDate).format('yyyy-MM-DD');\n        searchValues.endDate = moment(searchValues.endDate).format('yyyy-MM-DD');\n\n        searchValues.isTopFix = searchValues.isTopFix === 'all' ? undefined : searchValues.isTopFix;\n        setSearchParams({ ...searchValues, page: 1, limit: 10 });\n        handleSearchData({ ...searchValues, page: 1, limit: 10 });\n    };\n\n    const handleSearchData = param => {\n        setLoading(\n            getNotices(param, data => {\n                setRowDatas(data?.result);\n                setTotal(data?.result.total);\n            })\n        );\n    };\n    const moveAddPage = param => {\n        history.push('/partner/notice/new');\n    };\n    useEffect(() => {\n        // handleSearchData(searchParams);\n        onSearch();\n    }, []);\n\n    const onRowSelected = event => {\n        // history.push(`/notices/notice/${event.data.articleIdx}`);\n        setSelectItem(event.data);\n    };\n    const hideModal = isChaged => {\n        // history.push(`/notices/notice/${event.data.articleIdx}`);\n        setSelectItem(undefined);\n        if (isChaged) {\n            handleSearchData(searchParams);\n        }\n    };\n    const fileDownload = () => {\n        setLoading(\n            apiExcelFileDownload({\n                url: '/board-api/cms/notices/excel?page=1&limit=30&searchDateType=0&startDate=2022-02-10&endDate=2022-02-12&isConfirm=1&isTopFix=&isUse=1&searchRegisterName=&searchWord=&noticeTargetIds=&targetIds=&userId=&noticeTarget=1&isTopFix=&searchRegisterName=&searchWord=&noticeTargetIds=&targetIds=&userId=',\n                fileNm: `공지사항_${moment().format('yyyyMMddHHmmss')}.xls`,\n                data: searchParams\n            })\n        );\n    };\n    const onClickDelete = () => {\n        const nodes = gridApi.getSelectedNodes();\n        let answerIdx = [];\n        const idxs = nodes.map(item => {\n            if (item.data.answerIdx !== null) {\n                answerIdx.push({ articleIdx: item.data.articleIdx, answerIdx: item.data.answerIdx });\n            }\n            return item.data.articleIdx;\n        });\n        if (idxs.length === 0) {\n            return modal.msg('001');\n        }\n        modal.msg(answerIdx.length > 0 ? '105' : '102', '', () => {\n            // 답변 한번에 삭제 하는 API 없어서 임시로\n            answerIdx.length > 0 &&\n                answerIdx.map(item => {\n                    return deleteNoticeAnswer({ articleIdx: item.articleIdx, answerIdx: item.answerIdx }, () => {\n                        //\n                    });\n                });\n            setLoading(\n                deleteNotices({ noticeTargetIds: idxs.toString() }, () => {\n                    onSearch();\n                })\n            );\n        });\n    };\n    return (\n        <>\n            <section className=\"page_content\">\n                <Breadcrumb className=\"title-navi__navi\">\n                    <Breadcrumb.Item className=\"title-navi__navi__home\">파트너 게시판관리</Breadcrumb.Item>\n                    <Breadcrumb.Item className=\"title-navi__navi__parent\">파트너 공지사항</Breadcrumb.Item>\n                </Breadcrumb>\n                <Form form={form} layout=\"horizontal\">\n                    <Row align=\"bottom\" key={uniqueId()} style={{ marginBottom: '10px', marginTop: '-12px' }}>\n                        <Col span={12}>검색조건</Col>\n                        <Col span={12} style={{ textAlign: 'end' }}>\n                            <Button type=\"primary\" htmlType=\"submit\" onClick={onSearch}>\n                                조회\n                            </Button>\n                            &nbsp;\n                            <Button type=\"primary\" htmlType=\"reset\">\n                                초기화\n                            </Button>\n                        </Col>\n                    </Row>\n                    <NoticeFilter form={form} />\n                </Form>\n                <Row align=\"bottom\" key={uniqueId()} style={{ marginBottom: '10px', marginTop: '-12px' }}>\n                    <Col span={24}>\n                        검색결과 : <span style={{ color: 'red' }}>({numberWithCommas(total)}건)</span>\n                    </Col>\n                </Row>\n                {rowDatas && (\n                    <NoticeList\n                        data={rowDatas}\n                        page={searchParams?.page}\n                        onRowSelected={onRowSelected}\n                        onChangePage={onChangePage}\n                        onShowSizeChange={onShowSizeChange}\n                        moveAddPage={moveAddPage}\n                        fileDownload={fileDownload}\n                        setGridApi={setGridApi}\n                        onClickDelete={onClickDelete}\n                    />\n                )}\n            </section>\n            <div>\n                {selectItem && (\n                    <DetailContainer\n                        articleIdx={selectItem.articleIdx}\n                        hideModal={hideModal}\n                        answerIdx={selectItem.answerIdx}\n                    />\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default NoticeListContent;\n","import React from 'react';\nimport NoticeListContent from './NoticeList';\n\nconst NoticeList: React.FunctionComponent = () => {\n    const Header = {\n        title: ''\n    };\n\n    return <NoticeListContent />;\n};\n\nexport default NoticeList;\n"],"names":["props","mode","form","content","setContent","uploadFiles","setUploadFiles","boadrFiles","setBoadrFiles","setIsChaged","onClickDownLoad","userInfo","useState","visibleTargetSearch","setVisibleTargetSearch","useEffect","layout","onChange","className","labelCol","span","wrapperCol","name","hidden","label","initialValue","justify","style","width","e","options","targetsOptions","marginLeft","marginRight","readOnly","setValue","id","map","item","setFieldsValue","noticeTargetIds","toString","confirmOptions","valuePropName","useOptions","rules","required","message","value","height","marginTop","downloadFiles","setDownloadFiles","maxCount","length","emptyString","moment","format","getFieldValue","boardType","reply","articleAttachType","articleIdx","articleType","refresh","useUser","replys","setReplys","setLoading","useLoding","onDeleteReply","param","modal","deleteReply","Number","replyIdx","data","indexOf","apiFileDownload","idx","fileName","madeReplyData","forEach","element","parentReplyIdx","push","children","borderLeft","borderRight","index","padding","align","minHeight","marginBottom","registerName","regId","registDate","button","type","replyLevel","replyAttachList","el","FileOutlined","title","onClick","uniqueId","replyContent","textAlign","replyItem","cItem","paddingLeft","EnterOutlined","transform","NewReply","hideModal","answerIdx","setData","answerData","setAnswerData","Form","setModifyMode","newAnswerIdx","setNewAnswerIdx","isChaged","isAnsChaged","setIsAnsChaged","apiCall","getNotice","result","files","noticeData","closeModal","getNoticeAnswer","visible","onCancel","footer","NoticeForm","validateFields","then","values","params","isTopFix","formData","FormData","Object","keys","key","undefined","append","putNotice","apiDelete","replyList","AnswerForm","viewMode","answerReplyList","dateTypeOptions","Manager","topFixOptions","searchOptions","page","onRowSelected","onChangePage","onShowSizeChange","moveAddPage","setGridApi","fileDownload","onClickDelete","gridOptions","columnDefs","field","headerName","minWidth","headerCheckboxSelection","checkboxSelection","cellClass","cellRendererFramework","color","articleReplyCnt","answerTitle","display","articleAnswerReplyCnt","headerHeight","rowHeight","defaultColDef","flex","editable","resizable","sortable","suppressRowClickSelection","rowSelection","backgroundColor","AgGridReact","rowData","list","onGridReady","api","enableRangeSelection","onRowDoubleClicked","enableBrowserTooltips","total","current","showSizeChanger","defaultPageSize","rowDatas","setRowDatas","setTotal","selectItem","setSelectItem","searchParams","setSearchParams","gridApi","history","useHistory","onSearch","searchValues","getFieldsValue","startDate","endDate","limit","handleSearchData","getNotices","htmlType","numberWithCommas","event","size","console","log","apiExcelFileDownload","url","fileNm","nodes","getSelectedNodes","idxs","deleteNoticeAnswer","deleteNotices"],"sourceRoot":""}