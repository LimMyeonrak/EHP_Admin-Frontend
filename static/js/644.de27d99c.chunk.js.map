{"version":3,"file":"static/js/644.de27d99c.chunk.js","mappings":"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","sources":["api/partner/noticesApi.ts"],"sourcesContent":["import { AnyParamType, CommonResult } from 'api/common/commonType';\nimport axios from 'axios';\nimport { Cookies } from 'react-cookie';\nimport service from '../request';\nimport {\n    Notice,\n    NoticeList,\n    Answer,\n    PatnerQuestions,\n    PatnerQuestion,\n    NoticeParam,\n    QuestionParam,\n    ReplyDeleteParam\n} from './noticesType';\n\nexport const getNotices = async (payload: NoticeParam, callback: (e: NoticeList) => void): Promise<void> => {\n    const { data } = await service.get<NoticeList>(`/board-api/cms/notices`, { params: payload });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const postNotices = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data } = await service({\n        url: `/board-api/cms/notices`,\n        method: 'post',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const getNotice = async (payload: number, callback: (e: Notice) => void): Promise<void> => {\n    const { data } = await service.get(`/board-api/cms/notices/${payload}`);\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const putNotice = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/notices`,\n        method: 'put',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const deleteNotice = async (payload: number, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/notices/${payload}`,\n        method: 'delete'\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const deleteNotices = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/notices`,\n        method: 'delete',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const postNoticesAnswer = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/notices/answer`,\n        method: 'post',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\nexport const getNoticeAnswer = async (payload: number, callback: (e: Answer) => void): Promise<void> => {\n    const { data } = await service.get(`/board-api/cms/notices/answer/${payload}`);\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const putNoticeAnswer = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/notices/answer`,\n        method: 'put',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\nexport const deleteNoticeAnswer = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    console.log('deleteNoticeAnswer');\n    console.log(payload);\n    const { data = null } = await service({\n        url: `/board-api/cms/notices/answer/${payload.articleIdx}/${payload.answerIdx}`,\n        method: 'delete'\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const apiExcelFileDownload = async (payload: AnyParamType): Promise<void> => {\n    await service\n        .get(\n            // `/board-api/cms/notices/excel?page=1&limit=30&searchDateType=0&startDate=2022-01-10&endDate=2022-03-12&noticeTarget=&isConfirm=1&isTopFix=&isUse=1&searchRegisterName=&searchWord=&noticeTargetIds=&targetIds=&userId=&noticeTarget=&isTopFix=&searchRegisterName=&searchWord=&noticeTargetIds=&targetIds=&userId=`,\n            payload.url,\n            { responseType: 'blob', params: payload.params }\n        )\n        .then(response => {\n            const url = window.URL.createObjectURL(\n                new Blob([response.data], { type: response.headers['content-type'] })\n            );\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', payload.fileName);\n            document.body.appendChild(link);\n            link.click();\n        });\n};\n/**\n-- 댓글 API\nboardType게시판 타입 (3 : 파트너 1:1문의 게시판, 0: 공지사항)\narticleAttachType 게시물 타입 필수 입니다.(1:1 파트너 문의사항: 3,게시글의 댓글 : 5 , 답글의 댓글 : 6)\narticleType 게시물 타입 (게시글의 댓글 : Q , 답글의 댓글 : A)\nreplyIdx 댓글의 id값\narticleIdx 게시물의 id값\nreplyContent 댓글 내용\nfiles파일 \n*/\n/*\n    -F 'files=@hello_notice_answer_article_Reply_01.txt;type=text/plain' \\\n    -F 'files=@hello_notice_answer_article_Reply_02.txt;type=text/plain' \\\n    -F 'boardType=0' \\\n    -F 'articleType=Q' \\\n    -F 'articleAttachType=5' \\\n    -F 'articleIdx=39' \\\n    -F 'replyLevel=0' \\\n    -F 'parentReplyIdx=null' \\\n    -F 'replyContent=39 게시글의 두번째 댓글의 대댓글 내용....!' \\\n    -F 'files=null'\n */\nexport const postReply = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/reply`,\n        method: 'post',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n/*\n    'boardType=0' \\\n    -F 'articleType=A' \\\n    -F 'articleAttachType=6' \\\n    -F 'replyIdx=92' \\\n    -F 'articleIdx=103' \\\n    -F 'replyContent=39 게시글의 103 답글 첫번째 댓글 내용....! 수정합니다....' \\\n    -F 'files=null'\n */\nexport const putReply = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/reply`,\n        method: 'PUT',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const deleteReply = async (payload: ReplyDeleteParam, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/reply`,\n        method: 'DELETE',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const getPatnerQuestions = async (\n    payload: QuestionParam,\n    callback: (e: PatnerQuestions) => void\n): Promise<void> => {\n    const { data = null } = await service.get(`/board-api/cms/partners/questions/`, { params: payload });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const getPatnerQuestion = async (payload: number, callback: (e: PatnerQuestion) => void): Promise<void> => {\n    const { data = null } = await service.get(`/board-api/cms/partners/questions/${payload}`);\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const postPatnerQuestions = async (\n    payload: AnyParamType,\n    callback: (e: CommonResult) => void\n): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/questions`,\n        method: 'post',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const putPatnerQuestions = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/questions`,\n        method: 'put',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const putPatnerQuestionsStatus = async (\n    payload: AnyParamType,\n    callback: (e: CommonResult) => void\n): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/questions/status`,\n        method: 'put',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\nexport const deletePatnerQuestion = async (payload: number, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/questions/${payload}`,\n        method: 'delete'\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const deletePatnerQuestions = async (\n    payload: AnyParamType,\n    callback: (e: CommonResult) => void\n): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/questions`,\n        method: 'delete',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const deletePatnerQnA = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/question-answer/${payload}`,\n        method: 'delete',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const postPatnerAnswers = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/answers`,\n        method: 'post',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const putPatnerAnswers = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/answers`,\n        method: 'put',\n        data: payload.data\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\nexport const deletePatnerAnswer = async (payload: number, callback: (e: CommonResult) => void): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/answers/${payload}`,\n        method: 'delete'\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\nexport const deletePatnerAnswers = async (\n    payload: AnyParamType,\n    callback: (e: CommonResult) => void\n): Promise<void> => {\n    const { data = null } = await service({\n        url: `/board-api/cms/partners/answers`,\n        method: 'delete',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const apiFileDownload = async (payload: AnyParamType, callback: (e: CommonResult) => void): Promise<void> => {\n    await service\n        .get(`/board-api/cms/files/download`, { params: { idx: payload.idx }, responseType: 'blob' })\n        .then(response => {\n            const url = window.URL.createObjectURL(\n                new Blob([response.data], { type: response.headers['content-type'] })\n            );\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', payload.fileName);\n            document.body.appendChild(link);\n            link.click();\n        });\n};\n"],"names":["getNotices","payload","callback","service","params","data","postNotices","url","method","getNotice","putNotice","deleteNotice","deleteNotices","getNoticeAnswer","deleteNoticeAnswer","console","log","articleIdx","answerIdx","apiExcelFileDownload","responseType","then","response","window","URL","createObjectURL","Blob","type","headers","link","document","createElement","href","setAttribute","fileName","body","appendChild","click","deleteReply","getPatnerQuestions","getPatnerQuestion","putPatnerQuestionsStatus","postPatnerAnswers","putPatnerAnswers","deletePatnerAnswer","deletePatnerAnswers"],"sourceRoot":""}